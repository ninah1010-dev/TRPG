<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>單人 TRPG 冒險 (Gemini Canvas 版)</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for Inter font and scrollbars */
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            background-color: #0a0a0a; /* Dark background */
        }
        .scrollbar-thin::-webkit-scrollbar {
            width: 8px;
        }
        .scrollbar-thin::-webkit-scrollbar-track {
            background: #2d3748;
            border-radius: 10px;
        }
        .scrollbar-thin::-webkit-scrollbar-thumb {
            background-color: #4a5568;
            border-radius: 10px;
            border: 2px solid #2d3748;
        }
        .scrollbar-thin {
            scrollbar-width: thin;
            scrollbar-color: #4a5568 #2d3748;
        }
        /* Ensure containers take full height */
        #game-container > div {
            min-height: 200px; /* Minimum height for sections */
        }
        @media (min-width: 1024px) {
            #game-container > div {
                min-height: calc(100vh - 200px); /* Adjust height for larger screens */
            }
        }

        /* Removed Game Over Modal Styles as per user request */
    </style>
</head>
<body class="min-h-screen bg-gray-950 text-gray-100 p-4 sm:p-6 lg:p-8 flex flex-col">
    <h1 class="text-5xl font-extrabold text-center mb-8 text-white drop-shadow-lg">
        單人 TRPG 冒險
    </h1>

    <!-- 初始設定區域：分成兩個步驟 -->
    <div id="initial-setup-area" class="flex flex-col items-center justify-center flex-grow">
        <!-- 步驟 1: 冒險設定 -->
        <div id="adventure-settings-section" class="w-full max-w-4xl mb-8">
            <div class="bg-gradient-to-br from-gray-800 to-gray-900 text-gray-100 p-6 rounded-lg shadow-xl border border-gray-700 mb-6">
                <h2 class="text-3xl font-bold mb-6 text-yellow-400 border-b border-gray-600 pb-2">冒險設定</h2>

                <!-- 遊戲難度選擇 -->
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-400 mb-2">遊戲難度</label>
                    <div id="difficulty-selection" class="grid grid-cols-3 gap-4">
                        <button class="difficulty-button w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-colors" data-difficulty="easy">容易</button>
                        <button class="difficulty-button w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-colors border-2 border-blue-500" data-difficulty="medium">普通</button>
                        <button class="difficulty-button w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-colors" data-difficulty="hard">困難</button>
                    </div>
                </div>

                <!-- 故事風格選擇 -->
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-400 mb-2">選擇故事風格</label>
                    <div id="story-style-selection" class="grid grid-cols-2 md:grid-cols-3 gap-4">
                        <!-- Styles will be dynamically inserted here by renderInitialSetup -->
                    </div>
                    <p id="story-style-error" class="text-red-400 text-sm mt-1 hidden">請選擇一個故事風格。</p>
                </div>

                <!-- 預計遊戲回合數 -->
                <div class="mb-6">
                    <label for="game-turns-input" class="block text-sm font-medium text-gray-400 mb-2">預計遊戲回合數 (至少 6)</label>
                    <input type="number" id="game-turns-input" value="30" min="6"
                        class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white p-2 focus:ring-blue-500 focus:border-blue-500"/>
                    <p id="game-turns-error" class="text-red-400 text-sm mt-1 hidden">遊戲回合數不能少於 6。</p>
                </div>

                <!-- 載入遊戲紀錄 -->
                <div class="mb-6 text-center">
                    <label for="upload-game-record" class="inline-flex items-center justify-center bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105 active:scale-95 border-2 border-purple-400 text-lg cursor-pointer">
                        <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path></svg>
                        上傳遊戲紀錄
                    </label>
                    <input type="file" id="upload-game-record" accept=".json" class="hidden"/>
                </div>
            </div>
            <div class="flex justify-center">
                <button id="next-step-button"
                    class="bg-gradient-to-br from-blue-500 to-blue-700 hover:from-blue-600 hover:to-blue-800 text-white font-bold py-3 px-8 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105 active:scale-95 border-2 border-blue-400 text-xl">
                    下一步
                </button>
            </div>
        </div>

        <!-- 步驟 2: 角色設定 (預設隱藏) -->
        <div id="character-settings-section" class="w-full max-w-4xl mb-8 hidden">
            <div id="character-sheet-container">
                <!-- 角色設定介面將在這裡渲染 -->
            </div>
            <div class="flex justify-center mt-6 space-x-4">
                <button id="previous-step-button"
                    class="bg-gradient-to-br from-gray-500 to-gray-700 hover:from-gray-600 hover:to-gray-800 text-white font-bold py-3 px-8 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105 active:scale-95 border-2 border-gray-400 text-xl">
                    上一步
                </button>
                <button id="start-game-button"
                    class="bg-gradient-to-br from-green-500 to-green-700 hover:from-green-600 hover:to-green-800 text-white font-bold py-3 px-8 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105 active:scale-95 border-2 border-green-400 text-xl">
                    開始冒險！
                </button>
            </div>
        </div>
    </div>

    <!-- 遊戲主體區域：預設隱藏 -->
    <div id="game-container" class="flex flex-col lg:flex-row gap-6 flex-grow hidden">
        <!-- 左邊欄位：角色狀態、裝備與背包 -->
        <div id="left-column" class="lg:w-1/2 flex flex-col space-y-6">
            <!-- 角色設定在遊戲啟動後會變成只讀模式 -->
            <div id="character-sheet-container-game-mode"></div>
            <div id="inventory-container"></div>
        </div>

        <!-- 右邊欄位：狀態與時間、冒險日誌 -->
        <div id="right-column" class="lg:w-1/2 flex flex-col space-y-6">
            <div id="status-display-container"></div>
            <div id="story-log-container"></div>
            <!-- 擲骰系統在遊戲主體中被隱藏，只在日誌中顯示 -->
            <div id="dice-roller-container" class="hidden"></div>
        </div>
    </div>

    <!-- 最底部：匯出遊戲記錄 -->
    <div id="export-game-container" class="mt-6 hidden"></div>

    <!-- Removed Game Over Modal HTML as per user request -->

    <script type="module">
        // Firebase 模組導入 (適用於 Canvas 環境)
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";

        // --- 全域狀態 ---
        let gameState = {
            character: {
                name: "伊薩克", // 預設值
                race: "人類", // 預設值
                gender: "不確定", // 預設值
                profession: "研究員", // 預設值
                gameBackground: "你是一名研究員，剛從瘋人院逃脫，乘船來到這座小島。這裡是你過去發瘋的地方，但你已忘記原因，現在你回來尋找真相，你的名字是伊薩克。", // 世界觀 (現在默認是角色背景的一部分，如果選擇自訂則可編輯)
                background: "你是一名研究員，剛從瘋人院逃脫，乘船來到這座小島。這裡是你過去發瘋的地方，但你已忘記原因，現在你回來尋找真相，你的名字是伊薩克。", // 角色背景故事 (已翻譯)
                attributes: {
                    strength: 3,
                    agility: 4,
                    intelligence: 5,
                    constitution: 3,
                    sanity: 3,
                    charisma: 2
                },
                maxHp: 100,
                currentHp: 100,
                maxMp: 50,
                currentMp: 50,
                maxSanity: 100,
                currentSanity: 100,
                maxHunger: 100,
                currentHunger: 100,
                maxFatigue: 0,
                currentFatigue: 0,
                skills: ["鑑定", "製造"], // 預設值
                talents: ["相當聰明"], // 預設值
                specialAbilities: ["快速學習：能夠迅速掌握新知識與技能，減少學習所需的時間。"], // 預設值，現在包含描述
                buffs: [], // 新增 Buff 列表
                debuffs: [], // 新增 Debuff 列表
            },
            equippedItems: [
                { id: "rusty_sword", name: "生鏽的短劍", type: "weapon", slot: "mainHand", description: "一把破舊但仍鋒利的短劍。", stats: { strength: 1 }, quantity: 1 },
                { id: "worn_leather", name: "磨損的皮甲", type: "armor", slot: "body", description: "一套舊皮甲，提供基礎保護。", stats: {}, quantity: 1 }, // 調整為無體力加成
                { id: "ring_of_agility", name: "敏捷戒指", type: "accessory", slot: "accessory", description: "一個閃耀著微光的戒指，增加敏捷。", stats: { agility: 2 }, quantity: 1 } // 新增敏捷戒指
            ],
            backpack: [
                { id: "healing_potion", name: "治療藥水", type: "consumable", description: "恢復少量生命值。", quantity: 2 },
                { id: "travel_rations", name: "旅行口糧", type: "consumable", description: "恢復少量飽食度。", quantity: 3 }
            ],
            gameStarted: false,
            gameTime: { day: 1, hour: 8, minute: 0 },
            storyLog: [],
            currentEvent: null, // 現在會包含 AI 提供的選項及其難度
            loadingStory: false,
            lastDiceRoll: null,
            userId: null,
            maxTotalAttributePoints: 20, // 屬性總點數上限已調整為 20
            difficulty: 'medium', // 新增遊戲難度
            newItem: {
                name: '',
                type: 'weapon',
                slot: 'mainHand',
                description: '',
                stats: { strength: 0, agility: 0, intelligence: 0, constitution: 0, sanity: 0, charisma: 0 }, // 物品屬性預設為 0
                quantity: 1
            },
            storyStyle: null, // 新增：選擇的故事風格
            maxTurns: 30,     // 新增：當前遊戲回合數
            currentTurn: 0,   // 新增：當前遊戲回合數
            storyStyles: [ // 預定義故事風格
                { id: 'fantasy_adventure', name: '奇幻冒險', description: '探索神秘的國度，遭遇魔法生物與古老遺蹟。' },
                { id: 'sci_fi_exploration', name: '科幻探索', description: '駕駛星艦，探索未知星系，面對外星文明與科技挑戰。' },
                { id: 'mystery_thriller', name: '懸疑推理', description: '在陰森的城市中解開謎團，揭露背後的真相。' },
                { id: 'apocalyptic_survival', name: '末日生存', description: '在荒蕪的世界中掙扎求生，對抗飢餓、危險與絕望。' },
                { id: 'custom_story', name: '自訂故事', description: '創建你自己的獨特世界觀。' } // 新增自訂故事風格
            ],
            setupStep: 1, // 新增：初始設定步驟 (1: 冒險設定, 2: 角色設定)
            gameOver: false, // 新增：遊戲結束狀態
            gameOverReason: '', // 新增：遊戲結束原因
        };

        // --- Firebase 配置與初始化 (適用於 Canvas 環境) ---
        // Canvas 環境會自動提供 __firebase_config 和 __initial_auth_token
        let app;
        let auth;

        const initializeFirebase = async () => {
            try {
                const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
                app = initializeApp(firebaseConfig);
                auth = getAuth(app);

                const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
                if (initialAuthToken) {
                    const userCredential = await signInWithCustomToken(auth, initialAuthToken);
                    gameState.userId = userCredential.user?.uid;
                } else {
                    const userCredential = await signInAnonymously(auth);
                    gameState.userId = userCredential.user?.uid;
                }
                renderStatusDisplay(); // 更新顯示 userId
            } catch (error) {
                console.error("Firebase 認證失敗:", error);
                gameState.userId = crypto.randomUUID(); // 如果認證失敗，使用隨機 ID
                renderStatusDisplay(); // 更新顯示 userId
            }
        };

        // --- 助手函數 ---
        const delay = (ms) => new Promise(res => setTimeout(res, ms));

        const rollDice = (type) => {
            let result;
            switch (type) {
                case 'd4': result = Math.floor(Math.random() * 4) + 1; break;
                case 'd6': result = Math.floor(Math.random() * 6) + 1; break;
                case 'd8': result = Math.floor(Math.random() * 8) + 1; break;
                case 'd10': result = Math.floor(Math.random() * 10) + 1; break;
                case 'd12': result = Math.floor(Math.random() * 12) + 1; break;
                case 'd20': result = Math.floor(Math.random() * 20) + 1; break;
                case 'd30': result = Math.floor(Math.random() * 30) + 1; break; // 新增 d30
                case 'd60': result = Math.floor(Math.random() * 60) + 1; break; // 新增 d60
                case 'd100': result = Math.floor(Math.random() * 100) + 1; break;
                default: result = 0;
            }
            return result;
        };

        const getTimestamp = (day, hour, minute) => {
            const formatHour = hour % 12 === 0 ? 12 : hour % 12;
            const ampm = hour < 12 || hour === 24 ? 'AM' : 'PM';
            const minuteStr = minute < 10 ? `0${minute}` : minute;
            return `第 ${day} 天, ${formatHour}:${minuteStr} ${ampm}`;
        };

        const itemSlotMap = {
            mainHand: "主手武器",
            offHand: "副手",
            head: "頭部",
            body: "身體",
            legs: "腿部",
            feet: "腳部",
            ring: "戒指",
            necklace: "項鍊",
            accessory: "飾品"
        };

        // Helper to escape HTML for text content and attributes
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;")
                .replace(/`/g, "&#96;"); // Escape backticks too
        }

        // --- Gemini API 呼叫 ---
        const callGeminiAPI = async (prompt, generationConfig = {}) => {
            // 在 Canvas 環境中，apiKey 將會自動提供，因此保持為空字串。
            const apiKey = "AIzaSyD63thNwcb1_2grNDqlf2NmWV2y8mEGKTI"; 

            if (!apiKey) {
                console.error("Gemini API Key is missing. Please provide your API key in the 'callGeminiAPI' function.");
                return "無法生成故事，請提供有效的 Gemini API 金鑰。";
            }

            let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
            const payload = { contents: chatHistory, generationConfig };
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

            for (let i = 0; i < 5; i++) {
                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        // Handle non-2xx responses from the API
                        const errorText = await response.text();
                        console.error(`Gemini API 錯誤回應 (Status: ${response.status}):`, errorText);

                        // 針對 401 Unauthorized 錯誤提供更明確的提示
                        if (response.status === 401) {
                            console.warn("API 驗證失敗 (401 Unauthorized)。請檢查您的 Gemini API 金鑰是否正確配置。");
                            return `Gemini API 請求失敗 (Status: ${response.status}). 請檢查您的 API 金鑰。`;
                        }

                        // Retry for specific error codes or throw immediately for others
                        if (response.status === 423 || response.status === 429) { // Rate limit or Locked Resource
                            await delay(Math.pow(2, i) * 1000);
                            continue;
                        } else {
                            // For other non-retryable errors, just return the error string
                            return `Gemini API 請求失敗 (Status: ${response.status}).`;
                        }
                    }

                    let result;
                    try {
                        result = await response.json(); // Attempt to parse JSON
                    } catch (jsonParseError) {
                        console.error("Gemini API 回應不是有效的 JSON:", jsonParseError, await response.text());
                        return "Gemini API 回應格式異常。"; // Indicate a format issue
                    }

                    if (result.candidates && result.candidates.length > 0 &&
                        result.candidates[0].content && result.candidates[0].content.parts &&
                        result.candidates[0].content.parts.length > 0) {
                        return result.candidates[0].content.parts[0].text;
                    } else {
                        console.error("Gemini API 回應結構異常或內容缺失:", result);
                        return "故事發展異常。";
                    }
                } catch (error) {
                    // This catch block handles network errors or errors thrown before fetch completes
                    console.error("呼叫 Gemini API 錯誤 (網路或Fetch失敗):", error);
                    if (i < 4) { // Only delay and retry if it's not the last attempt
                        await delay(Math.pow(2, i) * 1000);
                        continue;
                    }
                    return "無法生成故事，請稍後再試。";
                }
            }
            return "無法生成故事，請稍後再試。"; // Fallback after all retries fail
        };

        // --- 狀態更新函數 ---
        function updateCharacterState(updates) {
            gameState.character = { ...gameState.character, ...updates };

            // 重新計算最大生命/魔力等
            gameState.character.maxHp = 50 + (gameState.character.attributes.constitution * 5);
            gameState.character.maxMp = 20 + (gameState.character.attributes.intelligence * 3);
            gameState.character.maxSanity = 100; // 理智值最大值
            gameState.character.maxHunger = 100;
            gameState.character.maxFatigue = 100;

            // 確保當前值不超過最大值
            gameState.character.currentHp = Math.min(gameState.character.currentHp, gameState.character.maxHp);
            gameState.character.currentMp = Math.min(gameState.character.currentMp, gameState.character.maxMp);
            gameState.character.currentSanity = Math.min(gameState.character.currentSanity, gameState.character.maxSanity);
            gameState.character.currentHunger = Math.min(gameState.character.currentHunger, gameState.character.maxHunger);
            gameState.character.currentFatigue = Math.min(gameState.character.currentFatigue, gameState.character.maxFatigue);

            // 當前生命值不能低於0
            gameState.character.currentHp = Math.max(0, gameState.character.currentHp);
            if (gameState.character.currentHp <= 0 && gameState.gameStarted && !gameState.gameOver) {
                triggerGameOver("你的生命值已耗盡。");
            }

            renderCharacterSheet();
            if (gameState.gameStarted) {
                renderCharacterSheetGameMode(); // Update the game mode character sheet
            }
            renderStatusDisplay();
        }

        function updateEquippedItems(newEquipped) {
            gameState.equippedItems = newEquipped;
            renderInventory();
            renderCharacterSheet(); // Attributes might change
            if (gameState.gameStarted) {
                renderCharacterSheetGameMode(); // Update the game mode character sheet
            }
            renderStatusDisplay(); // Equipped status might change
        }

        function updateBackpack(newBackpack) {
            gameState.backpack = newBackpack;
            renderInventory();
        }

        function addStoryEntry(entry) {
            gameState.storyLog.push({ ...entry, timestamp: getTimestamp(gameState.gameTime.day, gameState.gameTime.hour, gameState.gameTime.minute) });
            renderStoryLog();
        }

        function advanceTime(minutes) {
            let prev = gameState.gameTime;
            let newMinute = prev.minute + minutes;
            let newHour = prev.hour + Math.floor(newMinute / 60);
            newMinute %= 60;
            let newDay = prev.day + Math.floor(newHour / 24);
            newHour %= 24;
            gameState.gameTime = { day: newDay, hour: newHour, minute: newMinute };

            // 應用時間影響
            updateCharacterState({
                currentFatigue: Math.min(gameState.character.maxFatigue, gameState.character.currentFatigue + (minutes / 60) * 5),
                currentHunger: Math.max(0, gameState.character.currentHunger - (minutes / 60) * 3),
                currentMp: Math.min(gameState.character.maxMp, gameState.character.currentMp + (minutes / 60) * 2)
            });
            renderStatusDisplay();
        }

        // --- 核心遊戲邏輯 ---

        // 獲取有效屬性 (考慮裝備加成)
        function getEffectiveAttributes() {
            let effective = { ...gameState.character.attributes };

            // 應用裝備加成到基礎屬性
            gameState.equippedItems.forEach(item => {
                if (item.stats) {
                    for (const stat in item.stats) {
                        effective[stat] = (effective[stat] || 0) + item.stats[stat];
                    }
                }
            });
            return effective;
        }

        // 裝備物品
        function equipItem(item) {
            // 從背包移除
            updateBackpack(gameState.backpack.filter(bpItem => bpItem.id !== item.id));

            // 檢查槽位是否被佔用，如果佔用，將舊物品移回背包
            const updatedEquipped = item.slot ? gameState.equippedItems.filter(i => i.slot !== item.slot) : gameState.equippedItems;
            updateEquippedItems([...updatedEquipped, { ...item, slot: item.slot }]);
        }

        // 卸下物品
        function unequipItem(item) {
            updateEquippedItems(gameState.equippedItems.filter(eItem => eItem.id !== item.id));
            addItemToBackpack({ ...item, slot: 'backpack' });
        }

        // 丟棄物品
        function discardItem(item) {
            if (item.slot === 'backpack') {
                updateBackpack(gameState.backpack.filter(bpItem => bpItem.id !== item.id));
            } else {
                updateEquippedItems(gameState.equippedItems.filter(eItem => eItem.id !== item.id));
            }
        }

        // 使用消耗品
        function useConsumable(item) {
            const existing = gameState.backpack.find(i => i.id === item.id);
            if (existing && existing.quantity > 1) {
                updateBackpack(gameState.backpack.map(i => (i.id === item.id ? { ...i, quantity: i.quantity - 1 } : i)));
            } else {
                updateBackpack(gameState.backpack.filter(i => i.id !== item.id));
            }

            // 應用物品效果 (簡化)
            if (item.id === 'healing_potion') {
                updateCharacterState({ currentHp: Math.min(gameState.character.maxHp, gameState.character.currentHp + 20) });
                addStoryEntry({ type: "narration", content: `你使用了 ${item.name}，恢復了 20 點生命值。` });
            } else if (item.id === 'travel_rations') {
                updateCharacterState({ currentHunger: Math.min(gameState.character.maxHunger, gameState.character.currentHunger + 30) });
                addStoryEntry({ type: "narration", content: `你使用了 ${item.name}，恢復了 30 點飽食度。` });
            }
            advanceTime(1);
            return true;
        }

        // 添加物品到背包 (確保 slot 屬性)
        function addItemToBackpack(item) {
            // 確保物品總是有一個 'slot' 屬性，即使是 'backpack' 或未指定
            const itemWithSlot = { ...item, slot: item.slot || 'backpack' };

            const existing = gameState.backpack.find(i => i.id === itemWithSlot.id && i.type === itemWithSlot.type);
            if (existing) {
                updateBackpack(gameState.backpack.map(i => (i.id === itemWithSlot.id ? { ...i, quantity: i.quantity + (itemWithSlot.quantity || 1) } : i)));
            } else {
                updateBackpack([...gameState.backpack, { ...itemWithSlot, quantity: itemWithSlot.quantity || 1 }]);
            }
        }

        // AI 隨機生成物品
        async function generateRandomItemWithAI() {
            addStoryEntry({ type: "narration", content: `你嘗試運用你的世界觀，想像一個可能的物品...` });
            gameState.loadingStory = true;
            renderStoryLog();

            // 更新提示詞：不再要求生成 stats
            const itemGenerationPrompt = `你是一個專門為 TRPG 設計物品的專家。請根據以下世界觀生成一個符合情境的隨機物品。物品類型 (type) 必須是 weapon, armor, consumable, quest, misc 之一。如果類型是 weapon, armor, 或 accessory，則槽位 (slot) 必須是 mainHand, offHand, head, body, legs, feet, ring, necklace, accessory 之一。如果類型是 consumable, quest, misc，則槽位可以留空。請用繁體中文回應，**你的回應必須是 JSON 格式，不允許任何額外文字或前導說明**，並提供以下 JSON 格式的物品資訊：
世界觀: ${escapeHtml(gameState.character.gameBackground)}
`;

            // 更新 generationConfig：移除 stats 屬性及其要求，並修正 slot enum
            const generationConfig = {
                responseMimeType: "application/json",
                responseSchema: {
                    type: "OBJECT",
                    properties: {
                        "name": { "type": "STRING" },
                        "type": { "type": "STRING", "enum": ["weapon", "armor", "consumable", "quest", "misc"] },
                        // 修正 slot enum，移除空字串 ""
                        "slot": { "type": "STRING", "enum": ["mainHand", "offHand", "head", "body", "legs", "feet", "ring", "necklace", "accessory"] },
                        "description": { "type": "STRING" }
                        // stats 屬性已移除
                    },
                    // 將 slot 設置為非必須，因為 consumable, quest, misc 類型物品不需要 slot
                    "required": ["name", "type", "description"]
                }
            };

            try {
                const rawJson = await callGeminiAPI(itemGenerationPrompt, generationConfig);

                let itemData;
                // 檢查是否為空回應或 API 傳回的錯誤訊息 (例如 "無法生成故事")
                if (!rawJson || rawJson.trim() === "" || rawJson.startsWith("無法生成故事") || rawJson.startsWith("Gemini API 請求失敗") || rawJson.startsWith("Gemini API 回應格式異常")) {
                    throw new Error(rawJson || "API 返回空回應或無效 JSON。");
                }

                try {
                    itemData = JSON.parse(rawJson);
                } catch (jsonError) {
                    console.error("AI 物品生成：接收到的不是有效 JSON (嘗試解析失敗):", rawJson, jsonError);
                    addStoryEntry({ type: "narration", content: `AI 無法生成有效的物品資料 (解析錯誤)。原始回應: ${rawJson.substring(0, Math.min(rawJson.length, 100))}... 請再試一次。` });
                    return; // Stop execution if JSON parsing fails
                }

                const newItemId = `ai_item_${Date.now()}`;
                const generatedItem = {
                    id: newItemId,
                    name: itemData.name,
                    type: itemData.type,
                    // 如果物品類型不需要槽位，則設定為 'backpack'
                    slot: itemData.slot || (itemData.type === 'consumable' || itemData.type === 'quest' || itemData.type === 'misc' ? 'backpack' : ''),
                    description: itemData.description,
                    stats: itemData.stats || {}, // 確保 stats 始終是一個物件，即使 AI 未提供
                    quantity: 1
                };
                
                // For items that need a slot but AI didn't provide one (e.g., in case of an error), default to accessory
                if (!generatedItem.slot && (generatedItem.type === 'weapon' || generatedItem.type === 'armor' || generatedItem.type === 'accessory')) {
                    generatedItem.slot = 'accessory';
                }

                addItemToBackpack(generatedItem);
                addStoryEntry({ type: "narration", content: `你在腦海中構想出了一個新物品：**${escapeHtml(generatedItem.name)}**，它被放入了你的背包。` });

            } catch (error) {
                console.error("生成 AI 物品失敗:", error);
                addStoryEntry({ type: "narration", content: `嘗試生成物品失敗。錯誤: ${error.message || '未知錯誤'}。你感到一陣挫敗。` });
            } finally {
                gameState.loadingStory = false;
                renderStoryLog();
            }
            advanceTime(5); // 生成物品也消耗時間
        }

        // AI 生成角色函數
        async function generateCharacterFromStyle(styleId) {
            gameState.loadingStory = true;
            document.getElementById('start-game-button').disabled = true;
            document.getElementById('next-step-button').disabled = true;


            const selectedStyle = gameState.storyStyles.find(s => s.id === styleId);
            if (!selectedStyle) {
                console.error("未找到故事風格:", styleId);
                alert("選擇的故事風格無效，無法生成角色。");
                gameState.loadingStory = false;
                document.getElementById('start-game-button').disabled = false;
                document.getElementById('next-step-button').disabled = false;
                return;
            }

            let backgroundToUseInPrompt;
            if (styleId === 'custom_story') {
                backgroundToUseInPrompt = gameState.character.gameBackground; // Use current state value for custom background
                if (!backgroundToUseInPrompt || backgroundToUseInPrompt.trim() === "") {
                    // This case should ideally be caught by next-step-button, but as a fallback
                    alert("你選擇了「自訂故事」，請在角色設定頁面的「世界觀」文字框中輸入你的故事背景！");
                    gameState.loadingStory = false;
                    document.getElementById('start-game-button').disabled = false;
                    document.getElementById('next-step-button').disabled = false;
                    return;
                }
            } else {
                backgroundToUseInPrompt = selectedStyle.description;
            }

            // Get the current difficulty from gameState
            const currentDifficulty = gameState.difficulty;
            let totalAttributePointsForPrompt = 20; // Base value

            // Adjust total attribute points based on difficulty for prompt guidance
            // The prompt asks AI to set buffs/debuffs and then adjust points.
            // So, let's keep the base as 20 for AI, and let AI decide buffs/debuffs
            // and the *resulting* total for the response. We will then validate this.

            const charGenerationPrompt = `你是一個專業的 TRPG 角色生成器，請根據以下故事風格和世界觀，生成一個符合情境的預設角色。請確保角色背景故事、技能、天賦、特殊能力、增益和減益都以繁體中文生成。

故事風格：${escapeHtml(selectedStyle.name)} - ${escapeHtml(selectedStyle.description)}
世界觀: ${escapeHtml(backgroundToUseInPrompt)}
當前遊戲難度設定為: **${currentDifficulty}**。

請在你的回應中提供一個角色 JSON 物件，不包含任何額外文字或前導說明。JSON 必須包含以下欄位：
- name (string): 角色姓名 (繁體中文)
- race (string): 角色種族 (繁體中文)
- gender (string): 角色性別 (繁體中文)
- profession (string): 角色職業 (繁體中文)
- background (string): 角色背景故事 (約 100-150 字，繁體中文)
- attributes (object): 包含 strength, agility, intelligence, constitution, sanity, charisma 六個屬性，每個屬性值介於 1 到 18 之間。
- skills (array of string): 角色擁有的技能列表 (繁體中文，每個技能都是一個短語)。
- talents (array of string): 角色擁有的天賦列表 (繁體中文，每個天賦都是一個短語)。
- specialAbilities (array of string): 角色擁有的特殊能力列表。每個特殊能力應包含簡短的描述，說明其效果、如何被觸發以及可能涉及的骰子類型和難度（例如：“敏銳洞察：在關鍵時刻自動進行一次D60理智檢定(難度10)，成功則揭示隱藏線索。”）。至少生成一個。
- buffs (array of string, optional): 角色可能擁有的增益描述。如果存在，這代表角色有某種優勢，相應地，其屬性總點數會減少 5 點。例如："天賦異稟：學習新技能時效率提高。"
- debuffs (array of string, optional): 角色可能擁有的減益描述。如果存在，這代表角色有某種劣勢，但相應地，其屬性總點數會增加 5 點。例如："恐高症：在高處行動時會受到懲罰。"

請根據增益/減益狀態，設定角色**最終的屬性總點數**：
- 如果角色有任何增益，最終屬性總點數必須為 15。
- 如果角色有任何減益，最終屬性總點數必須為 25。
- 如果角色沒有增益也沒有減益，最終屬性總點數必須為 20。
請確保你分配的屬性點數總和精確符合上述規則。
`;

            const charGenerationConfig = {
                responseMimeType: "application/json",
                responseSchema: {
                    type: "OBJECT",
                    properties: {
                        "name": { "type": "STRING" },
                        "race": { "type": "STRING" },
                        "gender": { "type": "STRING" },
                        "profession": { "type": "STRING" },
                        "background": { "type": "STRING" },
                        "attributes": {
                            "type": "OBJECT",
                            "properties": {
                                "strength": { "type": "INTEGER", "minimum": 1, "maximum": 18 },
                                "agility": { "type": "INTEGER", "minimum": 1, "maximum": 18 },
                                "intelligence": { "type": "INTEGER", "minimum": 1, "maximum": 18 },
                                "constitution": { "type": "INTEGER", "minimum": 1, "maximum": 18 },
                                "sanity": { "type": "INTEGER", "minimum": 1, "maximum": 18 },
                                "charisma": { "type": "INTEGER", "minimum": 1, "maximum": 18 }
                            },
                            "required": ["strength", "agility", "intelligence", "constitution", "sanity", "charisma"]
                        },
                        "skills": { "type": "ARRAY", "items": { "type": "STRING" } },
                        "talents": { "type": "ARRAY", "items": { "type": "STRING" } },
                        "specialAbilities": { "type": "ARRAY", "items": { "type": "STRING" }, "minItems": 1 },
                        "buffs": { "type": "ARRAY", "items": { "type": "STRING" } },
                        "debuffs": { "type": "ARRAY", "items": { "type": "STRING" } }
                    },
                    "required": ["name", "race", "gender", "profession", "background", "attributes", "skills", "talents", "specialAbilities"]
                }
            };

            try {
                const rawJson = await callGeminiAPI(charGenerationPrompt, charGenerationConfig);

                let charData;
                if (!rawJson || rawJson.trim() === "" || rawJson.startsWith("無法生成故事") || rawJson.startsWith("Gemini API 請求失敗") || rawJson.startsWith("Gemini API 回應格式異常")) {
                    throw new Error(rawJson || "API 返回空回應或無效 JSON。");
                }

                try {
                    charData = JSON.parse(rawJson);
                } catch (jsonError) {
                    console.error("AI 角色生成：接收到的不是有效 JSON (嘗試解析失敗):", rawJson, jsonError);
                    alert(`AI 無法生成有效的角色資料 (解析錯誤)。原始回應: ${rawJson.substring(0, Math.min(rawJson.length, 100))}... 請再試一次。`);
                    return;
                }

                // Determine target total attribute points based on AI's generated buffs/debuffs
                let targetMaxTotalAttributePoints = 20; // Base value
                if (charData.buffs && charData.buffs.length > 0) {
                    targetMaxTotalAttributePoints = 15; // Buff -> 總點數減少 5
                } else if (charData.debuffs && charData.debuffs.length > 0) {
                    targetMaxTotalAttributePoints = 25; // Debuff -> 總點數增加 5
                }
                
                gameState.maxTotalAttributePoints = targetMaxTotalAttributePoints; // Update global state for UI and validation

                // Validate and redistribute attributes to match the new targetMaxTotalAttributePoints
                let attributesToAdjust = { ...charData.attributes };
                let currentSum = Object.values(attributesToAdjust).reduce((sum, val) => sum + val, 0);

                // Ensure no attribute is below 1 or above 18 during adjustment
                while (currentSum !== gameState.maxTotalAttributePoints) {
                    let attrs = Object.keys(attributesToAdjust);
                    let randomAttr = attrs[Math.floor(Math.random() * attrs.length)];

                    if (currentSum < gameState.maxTotalAttributePoints) {
                        if (attributesToAdjust[randomAttr] < 18) { // Max per attribute is 18
                            attributesToAdjust[randomAttr]++;
                            currentSum++;
                        } else {
                            // If randomAttr is already max, try another attribute
                            let found = false;
                            for (let i = 0; i < attrs.length; i++) {
                                let altAttr = attrs[(attrs.indexOf(randomAttr) + i) % attrs.length];
                                if (attributesToAdjust[altAttr] < 18) {
                                    attributesToAdjust[altAttr]++;
                                    currentSum++;
                                    found = true;
                                    break;
                                }
                            }
                            if (!found) {
                                console.warn("無法在不超出單屬性上限的情況下增加總點數。屬性分佈可能不理想。");
                                break; // Break to prevent infinite loop if all attributes are at max
                            }
                        }
                    } else { // currentSum > gameState.maxTotalAttributePoints
                        if (attributesToAdjust[randomAttr] > 1) { // Min per attribute is 1
                            attributesToAdjust[randomAttr]--;
                            currentSum--;
                        } else {
                            // If randomAttr is already min, try another attribute
                            let found = false;
                            for (let i = 0; i < attrs.length; i++) {
                                let altAttr = attrs[(attrs.indexOf(randomAttr) + i) % attrs.length];
                                if (attributesToAdjust[altAttr] > 1) {
                                    attributesToAdjust[altAttr]--;
                                    currentSum--;
                                    found = true;
                                    break;
                                }
                            }
                            if (!found) {
                                console.warn("無法在不低於單屬性下限的情況下減少總點數。屬性分佈可能不理想。");
                                break; // Break to prevent infinite loop if all attributes are at min
                            }
                        }
                    }
                }
                charData.attributes = attributesToAdjust;
                // --- Buff/Debuff 邏輯結束 ---

                const newCharacterState = {
                    name: charData.name,
                    race: charData.race,
                    gender: charData.gender,
                    profession: charData.profession,
                    background: charData.background,
                    attributes: charData.attributes,
                    skills: charData.skills,
                    talents: charData.talents,
                    specialAbilities: charData.specialAbilities,
                    buffs: charData.buffs || [],
                    debuffs: charData.debuffs || []
                };

                // Only update gameBackground if it's NOT a custom story. For custom, the user controls it.
                if (styleId !== 'custom_story') {
                    newCharacterState.gameBackground = selectedStyle.description;
                } else {
                    // For custom story, ensure background is consistent if AI overwrites it for any reason
                    newCharacterState.gameBackground = backgroundToUseInPrompt; // Use the value that was actually sent to the AI
                }

                updateCharacterState(newCharacterState);
                alert(`AI 根據 **${escapeHtml(selectedStyle.name)}** 風格為你生成了角色：**${escapeHtml(charData.name)}**。其屬性點數總和為 ${gameState.maxTotalAttributePoints}。`);

            } catch (error) {
                console.error("生成 AI 角色失敗:", error);
                alert(`嘗試生成角色失敗。錯誤: ${error.message || '未知錯誤'}。請檢查 API 金鑰或再試一次。`);
                // Reset maxTotalAttributePoints to default in case of error
                gameState.maxTotalAttributePoints = 20; 
            } finally {
                gameState.loadingStory = false;
                document.getElementById('start-game-button').disabled = false;
                document.getElementById('next-step-button').disabled = false;
            }
        }

        // Helper function to handle game over
        function triggerGameOver(reason) {
            gameState.gameOver = true;
            gameState.gameOverReason = reason;
            // Removed modal display logic
            // Instead, update the story log to show game over message and export button
            const storyInputArea = document.getElementById('story-input-area');
            if (storyInputArea) {
                storyInputArea.innerHTML = `
                    <div class="p-4 bg-gray-800 rounded-lg shadow-md border border-gray-700 text-center">
                        <h2 class="text-4xl font-extrabold text-red-500 mb-6 drop-shadow-lg">遊戲結束！</h2>
                        <p id="game-over-reason-display" class="text-lg text-gray-300 mb-8">${escapeHtml(reason)}</p>
                        <button id="export-log-button-gameover" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-8 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105 active:scale-95 border-2 border-indigo-400 text-lg">
                            匯出冒險日誌
                        </button>
                    </div>
                `;
                 // Attach event listener for the new export button in the game over state
                document.getElementById('export-log-button-gameover').onclick = () => {
                    const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(gameState, null, 2));
                    const downloadAnchorNode = document.createElement('a');
                    downloadAnchorNode.setAttribute("href", dataStr);
                    downloadAnchorNode.setAttribute("download", `trpg_adventure_gameOver_${Date.now()}.json`);
                    document.body.appendChild(downloadAnchorNode);
                    downloadAnchorNode.click();
                    downloadAnchorNode.remove();
                    // Optional: Provide visual feedback that the log has been exported
                    const exportButton = document.getElementById('export-log-button-gameover');
                    if (exportButton) {
                        exportButton.textContent = '已匯出！';
                        exportButton.disabled = true;
                    }
                };
            }
            // Ensure no further story generation is attempted
            gameState.loadingStory = false;
        }

        // 遊戲結束後重置遊戲狀態並回到首頁 (此功能已移除，但函數保留以防未來需要)
        function resetGame() {
            // 重置所有 gameState 變數到初始值
            gameState = {
                character: {
                    name: "伊薩克", // 預設值
                    race: "人類", // 預設值
                    gender: "不確定", // 預設值
                    profession: "研究員", // 預設值
                    gameBackground: "你是一名研究員，剛從瘋人院逃脫，乘船來到這座小島。這裡是你過去發瘋的地方，但你已忘記原因，現在你回來尋找真相，你的名字是伊薩克。",
                    background: "你是一名研究員，剛從瘋人院逃脫，乘船來到這座小島。這裡是你過去發瘋的地方，但你已忘記原因，現在你回來尋找真相，你的名字是伊薩克。",
                    attributes: { strength: 3, agility: 4, intelligence: 5, constitution: 3, sanity: 3, charisma: 2 },
                    maxHp: 100, currentHp: 100,
                    maxMp: 50, currentMp: 50,
                    maxSanity: 100, currentSanity: 100,
                    maxHunger: 100, currentHunger: 100,
                    maxFatigue: 0, currentFatigue: 0,
                    skills: ["鑑定", "製造"],
                    talents: ["相當聰明"],
                    specialAbilities: ["快速學習：能夠迅速掌握新知識與技能，減少學習所需的時間。"],
                    buffs: [], debuffs: [],
                },
                equippedItems: [
                    { id: "rusty_sword", name: "生鏽的短劍", type: "weapon", slot: "mainHand", description: "一把破舊但仍鋒利的短劍。", stats: { strength: 1 }, quantity: 1 },
                    { id: "worn_leather", name: "磨損的皮甲", type: "armor", slot: "body", description: "一套舊皮甲，提供基礎保護。", stats: {}, quantity: 1 },
                    { id: "ring_of_agility", name: "敏捷戒指", type: "accessory", slot: "accessory", description: "一個閃耀著微光的戒指，增加敏捷。", stats: { agility: 2 }, quantity: 1 }
                ],
                backpack: [
                    { id: "healing_potion", name: "治療藥水", type: "consumable", description: "恢復少量生命值。", quantity: 2 },
                    { id: "travel_rations", name: "旅行口糧", type: "consumable", description: "恢復少量飽食度。", quantity: 3 }
                ],
                gameStarted: false,
                gameTime: { day: 1, hour: 8, minute: 0 },
                storyLog: [],
                currentEvent: null,
                loadingStory: false,
                lastDiceRoll: null,
                userId: gameState.userId, // 保留 userId
                maxTotalAttributePoints: 20,
                difficulty: 'medium',
                newItem: { name: '', type: 'weapon', slot: 'mainHand', description: '', stats: { strength: 0, agility: 0, intelligence: 0, constitution: 0, sanity: 0, charisma: 0 }, quantity: 1 },
                storyStyle: null,
                maxTurns: 30,
                currentTurn: 0,
                storyStyles: [
                    { id: 'fantasy_adventure', name: '奇幻冒險', description: '探索神秘的國度，遭遇魔法生物與古老遺蹟。' },
                    { id: 'sci_fi_exploration', name: '科幻探索', description: '駕駛星艦，探索未知星系，面對外星文明與科技挑戰。' },
                    { id: 'mystery_thriller', name: '懸疑推理', description: '在陰森的城市中解開謎團，揭露背後的真相。' },
                    { id: 'apocalyptic_survival', name: '末日生存', 細胞: '在荒蕪的世界中掙扎求生，對抗飢餓、危險與絕望。' }, // Changed description here for consistency
                    { id: 'custom_story', name: '自訂故事', description: '創建你自己的獨特世界觀。' }
                ],
                setupStep: 1,
                gameOver: false,
                gameOverReason: '',
            };

            // // 隱藏遊戲結束彈窗 (這部分已移除)
            // document.getElementById('game-over-modal').classList.add('hidden');
            // // 隱藏遊戲主體，顯示初始設定區域
            // document.getElementById('game-container').classList.add('hidden');
            // document.getElementById('export-game-container').classList.add('hidden');
            // document.getElementById('initial-setup-area').classList.remove('hidden');

            // renderInitialSetup(); // 重新渲染初始設定頁面
            // For now, resetGame is effectively disabled from UI interaction.
        }


        // 處理玩家選擇/輸入
        async function handlePlayerChoice(choiceText, chosenOptionDifficulty, diceTypeForAction = 'd20') { // 接收骰子類型
            if (gameState.gameOver) {
                return; // Prevent further actions if game is over
            }

            gameState.loadingStory = true;
            addStoryEntry({ type: "player_choice", content: `你選擇了: ${choiceText}` });
            gameState.currentEvent = null; // 清除選項
            renderStoryLog(); // 立即更新 UI

            gameState.currentTurn++; // 每回合增加

            let effectiveDifficulty = chosenOptionDifficulty;
            if (gameState.difficulty === 'easy') {
                effectiveDifficulty = Math.max(1, chosenOptionDifficulty - 2); // 容易模式：難度 -2，最低為 1
            } else if (gameState.difficulty === 'hard') {
                effectiveDifficulty = chosenOptionDifficulty + 2; // 困難模式：難度 +2
            }

            const rollNeeded = effectiveDifficulty !== undefined; // 如果有難度，就表示需要擲骰

            let rollResult = null;
            let totalRollResult = null;
            let rollOutcome = "未擲骰"; // 預設為未擲骰
            let checkAttribute = null;

            if (rollNeeded) {
                let attributeToRoll = "agility"; // 預設為敏捷，可以根據 choiceText 判斷
                const lowerCaseChoiceText = choiceText.toLowerCase(); // 轉換為小寫以進行不區分大小寫的比較

                if (lowerCaseChoiceText.includes("調查") || lowerCaseChoiceText.includes("思考") || lowerCaseChoiceText.includes("偵測") || lowerCaseChoiceText.includes("分析")) {
                    attributeToRoll = "intelligence";
                } else if (lowerCaseChoiceText.includes("說服") || lowerCaseChoiceText.includes("交涉") || lowerCaseChoiceText.includes("欺騙") || lowerCaseChoiceText.includes("魅力") || lowerCaseChoiceText.includes("社交")) {
                    attributeToRoll = "charisma"; // Enhanced for Charisma
                } else if (lowerCaseChoiceText.includes("攻擊") || lowerCaseChoiceText.includes("力量") || lowerCaseChoiceText.includes("揮舞")) {
                    attributeToRoll = "strength";
                } else if (lowerCaseChoiceText.includes("躲避") || lowerCaseChoiceText.includes("敏捷") || lowerCaseChoiceText.includes("潛行") || lowerCaseChoiceText.includes("閃避")) {
                    attributeToRoll = "agility";
                } else if (lowerCaseChoiceText.includes("長途跋涉") || lowerCaseChoiceText.includes("移動") || lowerCaseChoiceText.includes("耐力") || lowerCaseChoiceText.includes("生存") || lowerCaseChoiceText.includes("體力")) {
                    attributeToRoll = "constitution"; // Enhanced for Constitution
                } else if (lowerCaseChoiceText.includes("感知") || lowerCaseChoiceText.includes("觀察") || lowerCaseChoiceText.includes("判斷") || lowerCaseChoiceText.includes("理智")) {
                    attributeToRoll = "sanity"; // 理智檢定
                }

                checkAttribute = attributeToRoll;
                const effectiveAttributes = getEffectiveAttributes();
                const attributeValue = effectiveAttributes[attributeToRoll];
                
                rollResult = rollDice(diceTypeForAction); // 使用 AI 決定的骰子類型
                totalRollResult = attributeValue + rollResult;
                
                // 判斷擲骰結果：失敗、成功、大成功
                if (rollResult === 1 && totalRollResult < effectiveDifficulty) { // 擲出 1 且失敗 -> 大失敗
                    rollOutcome = "大失敗";
                } else if (rollResult === diceTypeToMax[diceTypeForAction] && totalRollResult >= effectiveDifficulty) { // 擲出最大值且成功 -> 大成功 (臨界成功)
                    rollOutcome = "大成功";
                } else if (totalRollResult >= effectiveDifficulty + 5) { // 總和遠超難度 -> 大成功
                    rollOutcome = "大成功";
                } else if (totalRollResult >= effectiveDifficulty) { // 總和達到難度 -> 成功
                    rollOutcome = "成功";
                } else { // 總和未達到難度 -> 失敗
                    rollOutcome = "失敗";
                }

                gameState.lastDiceRoll = {
                    type: diceTypeForAction,
                    result: rollResult,
                    outcome: rollOutcome,
                    attribute: checkAttribute, // 使用 checkAttribute
                    attributeValue: attributeValue,
                    total: totalRollResult
                }; // 更新最後擲骰結果
                addStoryEntry({
                    type: "dice_roll",
                    content: `🎲 擲骰 (${attributeToRoll} 檢定，原始難度 ${chosenOptionDifficulty}，調整後難度 ${effectiveDifficulty}，使用 ${diceTypeForAction.toUpperCase()}): 擲出 **${rollResult}** + ${attributeToRoll} **${attributeValue}** = 總和 **${totalRollResult}** (${rollOutcome})`,
                    diceRoll: {
                        type: diceTypeForAction,
                        result: rollResult,
                        target: effectiveDifficulty, // Use effective difficulty for record
                        success: (rollOutcome === "成功" || rollOutcome === "大成功"),
                        outcome: rollOutcome
                    }
                });
                advanceTime(2);
            }

            const storyPrompt = `你是一個單人 TRPG 的遊戲主持人，你的世界觀是：「${escapeHtml(gameState.character.gameBackground)}」。
角色 "${escapeHtml(gameState.character.name)}" (一個 ${escapeHtml(gameState.character.race)} ${escapeHtml(gameState.character.profession)}) 選擇了 "${escapeHtml(choiceText)}"。
當前遊戲難度為 **${gameState.difficulty}**。
${rollNeeded ? `擲骰結果是 ${diceTypeForAction.toUpperCase()} 擲出 ${rollResult}，加上其 ${checkAttribute} 屬性值 ${getEffectiveAttributes()[checkAttribute]}，總和為 ${totalRollResult}，判定為 **${rollOutcome}**。` : ''}
角色當前的狀態：
- 生命值: ${gameState.character.currentHp}/${gameState.character.maxHp}
- 魔力值: ${gameState.character.currentMp}/${gameState.character.maxMp}
- 理智值: ${gameState.character.currentSanity}/${gameState.character.maxSanity}
- 飽食度: ${gameState.character.currentHunger}/${gameState.character.maxHunger}
- 疲勞度: ${gameState.character.currentFatigue}/${gameState.character.maxFatigue}
- 增益: ${gameState.character.buffs.length > 0 ? gameState.character.buffs.map(b => `"${b}"`).join('、') : '無'}
- 減益: ${gameState.character.debuffs.length > 0 ? gameState.character.debuffs.map(d => `"${d}"`).join('、') : '無'}
- 特殊能力: ${gameState.character.specialAbilities.map(sa => `"${sa}"`).join('、')}

當前遊戲回合數: ${gameState.currentTurn} / ${gameState.maxTurns}。
請將接下來的故事發展，以推進主線為目標，除非是重要情報否則不需過多描述。請務必參考回合數，**如果接近或達到最大回合數 (${gameState.maxTurns})，請簡化故事流程，直接引導故事走向高潮並準備一個簡單、明確的結局**。描述場景變化、潛在的 NPC 互動（NPC 對話必須由 AI 生成，且融入敘事中，例如 '一個疲憊的老人說道："...'），以及新的挑戰或線索。
根據角色的增益/減益、屬性強度和當前劇情難度，調整接下來選項的難度。如果角色能力較強或有增益，可提供更高難度的選項；如果角色能力較弱或有減益，則提供相對簡單的選項。
如果角色的行動明顯是自毀或導致立即終結（例如，角色選擇跳下深淵、攻擊不可戰勝的敵人且沒有合理的策略、無視嚴重傷害導致死亡），請在 JSON 中新增 **'gameOver': true** 和 **'gameOverReason': '你的行為導致了悲慘的結局。'** （繁體中文）欄位，並停止提供新的選項。
如果角色在這次行動中受到了傷害，請在 JSON 中新增 'damageDice' 欄位（一個字符串，必須是 "d4", "d6", "d10", "d20", "d30", "d60", "d100" 之一，根據傷害程度決定）。
你的回應必須是 JSON 格式，不允許任何額外文字或前導說明。JSON 必須包含 'narrative' (故事敘述，不超過 300 字) 和一個 'options' 陣列。
'options' 陣列必須恰好包含三個玩家行動選項。每個選項都應包含 'text' (玩家可選擇的行動文字)、'action' (內部標識符，可與 text 相同)、'difficulty' (一個介於 5 到 15 之間的數字，代表該行動的原始難度) 和 'diceType' (一個字符串，必須是 "d4", "d6", "d10", "d20", "d30", "d60", "d100" 之一，根據行動難度、角色能力和劇情平衡決定)。
如果故事即將結束，可以提供一個明確的結局選項。
如果角色狀態改變，請在敘事中暗示，例如："你感到一陣疲憊襲來..."。
`;

            const storyGenerationConfig = {
                responseMimeType: "application/json",
                responseSchema: {
                    type: "OBJECT",
                    properties: {
                        "narrative": { "type": "STRING" },
                        "options": {
                            "type": "ARRAY",
                            "items": {
                                "type": "OBJECT",
                                "properties": {
                                    "text": { "type": "STRING" },
                                    "action": { "type": "STRING" },
                                    "difficulty": { "type": "INTEGER", "minimum": 5, "maximum": 15 },
                                    "diceType": { "type": "STRING", "enum": ["d4", "d6", "d10", "d20", "d30", "d60", "d100"] } // 新增 diceType
                                },
                                "required": ["text", "action", "difficulty", "diceType"]
                            },
                            "minItems": 3,
                            "maxItems": 3 // 確保恰好三個選項
                        },
                        "damageDice": { "type": "STRING", "enum": ["d4", "d6", "d10", "d20", "d30", "d60", "d100"] }, // Optional damage dice
                        "gameOver": { "type": "BOOLEAN" }, // 新增遊戲結束標誌
                        "gameOverReason": { "type": "STRING" } // 新增遊戲結束原因
                    },
                    "required": ["narrative", "options"]
                }
            };

            try {
                const rawJson = await callGeminiAPI(storyPrompt, storyGenerationConfig);

                let storyResponse;
                if (!rawJson || rawJson.trim() === "" || rawJson.startsWith("無法生成故事") || rawJson.startsWith("Gemini API 請求失敗") || rawJson.startsWith("Gemini API 回應格式異常")) {
                    throw new Error(rawJson || "API 返回空回應或無效 JSON。");
                }

                try {
                    storyResponse = JSON.parse(rawJson);
                } catch (jsonError) {
                    console.error("AI 故事生成：接收到的不是有效 JSON (嘗試解析失敗):", rawJson, jsonError);
                    addStoryEntry({ type: "narration", content: `AI 無法生成有效的故事情節 (解析錯誤)。原始回應: ${rawJson.substring(0, Math.min(rawJson.length, 100))}... 請再試一次。` });
                    return;
                }

                // --- 傷害擲骰處理 ---
                if (storyResponse.damageDice) {
                    const damageDiceType = storyResponse.damageDice;
                    const damageRollResult = rollDice(damageDiceType);
                    const damageAmount = damageRollResult; 
                    
                    updateCharacterState({ currentHp: gameState.character.currentHp - damageAmount }); // updateCharacterState now handles <= 0 check
                    addStoryEntry({ type: "narration", content: `你受到了 **${damageAmount}** 點傷害 (${damageDiceType.toUpperCase()} 擲出 ${damageRollResult})！你的生命值剩餘 ${gameState.character.currentHp}/${gameState.character.maxHp}。` });
                }
                // --- 傷害擲骰處理結束 ---

                // Client-side truncation for story narrative
                let narrative = storyResponse.narrative;
                if (narrative.length > 300) {
                    narrative = narrative.substring(0, 300) + '...';
                }
                
                // NPC 對話提取（如果 AI 將對話融合在敘事中，這個邏輯仍然有效）
                let npcDialogueMatch = narrative.match(/(".*?"\s*說道[:：]?)|(說道[:：]?\s*".*?")|(\w+[:：]\s*".*?")/);
                let storyNarrative = narrative;
                let dialogueContent = null;
                let npcName = null;

                if (npcDialogueMatch) {
                    dialogueContent = npcDialogueMatch[0].trim();
                    const npcNameMatch = dialogueContent.match(/^(\w+)([:：])/);
                    if (npcNameMatch) {
                        npcName = npcNameMatch[1];
                    } else {
                        npcName = "未知NPC";
                    }
                    storyNarrative = narrative.replace(npcDialogueMatch[0], '').trim();
                }

                if (storyNarrative) {
                    addStoryEntry({ type: "event", content: escapeHtml(storyNarrative) });
                }
                if (dialogueContent) {
                    addStoryEntry({ type: "npc_dialogue", content: escapeHtml(dialogueContent), npc: escapeHtml(npcName) });
                }

                gameState.currentEvent = { options: storyResponse.options };
                
                // Check for game over conditions after processing AI response
                if (storyResponse.gameOver && !gameState.gameOver) { // Only trigger if not already game over by HP
                    const reason = storyResponse.gameOverReason || "你的行為導致了悲慘的結局。";
                    triggerGameOver(reason);
                }


            } catch (error) {
                console.error("生成故事失敗:", error);
                addStoryEntry({ type: "narration", content: `嘗試生成故事失敗。錯誤: ${error.message || '未知錯誤'}。你感到一陣挫敗。` });
                // 提供一個預設選項以避免卡住
                gameState.currentEvent = {
                    options: [
                        { text: "繼續前進", action: "continue", difficulty: 8, diceType: 'd20' },
                        { text: "尋找其他路徑", action: "find_other_path", difficulty: 10, diceType: 'd20' },
                        { text: "原地休息", action: "rest", difficulty: 5, diceType: 'd6' }
                    ]
                };
            } finally {
                gameState.loadingStory = false;
                advanceTime(15);
                renderStoryLog(); // 再次更新冒險日誌以顯示新選項和輸入框
            }
        }

        // --- 渲染函數 (每個區塊對應一個函數) ---

        // 角色設定模式下的角色狀態表 (可編輯)
        function renderCharacterSheet() {
            const container = document.getElementById('character-sheet-container');
            if (!container) return;
            container.innerHTML = ''; // 清空內容

            const effectiveAttributes = getEffectiveAttributes(); // 在設定模式下也計算有效屬性以便參考
            const currentTotalAttributes = Object.values(gameState.character.attributes).reduce((sum, val) => sum + val, 0);
            const isDisabled = gameState.gameStarted || gameState.loadingStory ? 'disabled' : '';

            let html = `
                <div class="bg-gradient-to-br from-gray-800 to-gray-900 text-gray-100 p-6 rounded-lg shadow-xl border border-gray-700 h-full overflow-y-auto scrollbar-thin">
                    <h2 class="text-3xl font-bold mb-6 text-yellow-400 border-b border-gray-600 pb-2">角色設定</h2>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-400">姓名</label>
                            <input type="text" id="char-name" value="${escapeHtml(gameState.character.name)}" ${isDisabled}
                                class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-400">種族</label>
                            <input type="text" id="char-race" value="${escapeHtml(gameState.character.race)}" ${isDisabled}
                                class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-400">性別</label>
                            <input type="text" id="char-gender" value="${escapeHtml(gameState.character.gender)}" ${isDisabled}
                                class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-400">職業</label>
                            <input type="text" id="char-profession" value="${escapeHtml(gameState.character.profession)}" ${isDisabled}
                                class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                        </div>
                    </div>

                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-400">角色背景故事</label>
                        <textarea id="char-background" rows="4" ${isDisabled}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500">${escapeHtml(gameState.character.background)}</textarea>
                    </div>

                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-400">世界觀 (影響故事開頭與物品生成)</label>
                        <textarea id="game-background" rows="4" ${isDisabled}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500">${escapeHtml(gameState.character.gameBackground)}</textarea>
                    </div>

                    <h3 class="text-2xl font-semibold mb-4 text-purple-300 border-b border-gray-600 pb-1">屬性 (有效值)</h3>
                    <p class="text-sm text-gray-400 mb-4">總點數: <span class="${currentTotalAttributes !== gameState.maxTotalAttributePoints ? 'text-red-500' : 'text-blue-300'} font-bold">${currentTotalAttributes}</span> / ${gameState.maxTotalAttributePoints}</p>
                    <div class="grid grid-cols-2 gap-4 mb-6">
            `;
            for (const key in gameState.character.attributes) {
                const displayName = {
                    strength: '力量', agility: '敏捷', intelligence: '智力',
                    constitution: '體力', sanity: '理智', charisma: '魅力'
                }[key] || key;
                html += `
                        <div class="flex items-center justify-between">
                            <label class="capitalize text-gray-300">${escapeHtml(displayName)}:</label>
                            <div class="flex items-center space-x-2">
                                <input type="number" min="1" max="18" id="attr-${key}" value="${gameState.character.attributes[key]}" ${isDisabled}
                                    class="w-16 bg-gray-700 border-gray-600 rounded-md text-center text-white"/>
                                <span class="text-green-400 text-lg font-bold">(${effectiveAttributes[key]})</span>
                            </div>
                        </div>
                `;
            }
            html += `
                    </div>

                    <h3 class="text-2xl font-semibold mb-4 text-teal-300 border-b border-gray-600 pb-1">技能 & 天賦</h3>
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-400">技能 (逗號分隔)</label>
                        <input type="text" id="char-skills" value="${escapeHtml(gameState.character.skills.join(', '))}" ${isDisabled}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                    </div>
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-400">天賦 (逗號分隔)</label>
                        <input type="text" id="char-talents" value="${escapeHtml(gameState.character.talents.join(', '))}" ${isDisabled}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                    </div>
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-400">特殊能力 (每行一個)</label>
                        <textarea id="char-abilities" rows="4" ${isDisabled}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500">${escapeHtml(gameState.character.specialAbilities.join('\n'))}</textarea>
                    </div>

                    <h3 class="text-2xl font-semibold mb-4 text-orange-300 border-b border-gray-600 pb-1">增益 (Buffs)</h3>
                    <div class="mb-6">
                        <textarea id="char-buffs" rows="2" ${isDisabled}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500">${escapeHtml(gameState.character.buffs.join('\n'))}</textarea>
                    </div>
                    <h3 class="text-2xl font-semibold mb-4 text-red-300 border-b border-gray-600 pb-1">減益 (Debuffs)</h3>
                    <div class="mb-6">
                        <textarea id="char-debuffs" rows="2" ${isDisabled}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500">${escapeHtml(gameState.character.debuffs.join('\n'))}</textarea>
                    </div>
                </div>
            `;
            container.innerHTML = html;

            // Attach event listeners ONLY IF not in game mode AND not loading
            if (!gameState.gameStarted && !gameState.loadingStory) {
                document.getElementById('char-name').onchange = (e) => updateCharacterState({ name: e.target.value });
                document.getElementById('char-race').onchange = (e) => updateCharacterState({ race: e.target.value });
                document.getElementById('char-gender').onchange = (e) => updateCharacterState({ gender: e.target.value });
                document.getElementById('char-profession').onchange = (e) => updateCharacterState({ profession: e.target.value });
                document.getElementById('char-background').onchange = (e) => updateCharacterState({ background: e.target.value });
                document.getElementById('game-background').onchange = (e) => updateCharacterState({ gameBackground: e.target.value }); // 新增世界觀監聽
                document.getElementById('char-skills').onchange = (e) => updateCharacterState({ skills: e.target.value.split(',').map(s => s.trim()).filter(Boolean) });
                document.getElementById('char-talents').onchange = (e) => updateCharacterState({ talents: e.target.value.split(',').map(s => s.trim()).filter(Boolean) });
                document.getElementById('char-abilities').onchange = (e) => updateCharacterState({ specialAbilities: e.target.value.split('\n').map(s => s.trim()).filter(Boolean) });
                document.getElementById('char-buffs').onchange = (e) => updateCharacterState({ buffs: e.target.value.split('\n').map(s => s.trim()).filter(Boolean) });
                document.getElementById('char-debuffs').onchange = (e) => updateCharacterState({ debuffs: e.target.value.split('\n').map(s => s.trim()).filter(Boolean) });


                for (const key in gameState.character.attributes) {
                    document.getElementById(`attr-${key}`).onchange = (e) => {
                        const newValue = parseInt(e.target.value);
                        if (isNaN(newValue) || newValue < 1 || newValue > 18) {
                            e.target.value = gameState.character.attributes[key]; // Revert input if invalid
                            return;
                        }

                        const newAttributes = { ...gameState.character.attributes, [key]: newValue };
                        const currentTotal = Object.values(newAttributes).reduce((sum, val) => sum + val, 0);

                        if (currentTotal > gameState.maxTotalAttributePoints) {
                            console.warn(`總屬性點數不能超過 ${gameState.maxTotalAttributePoints}！`);
                            alert(`總屬性點數不能超過 ${gameState.maxTotalAttributePoints}！`); // 提示用戶
                            e.target.value = gameState.character.attributes[key]; // Revert input
                            return;
                        }
                        updateCharacterState({ attributes: newAttributes });
                    };
                }
            }
        }

        // 遊戲模式下的角色狀態表 (只讀) - 新增
        function renderCharacterSheetGameMode() {
            const container = document.getElementById('character-sheet-container-game-mode');
            if (!container) return;
            container.innerHTML = ''; // 清空內容

            const effectiveAttributes = getEffectiveAttributes();
            const currentTotalAttributes = Object.values(gameState.character.attributes).reduce((sum, val) => sum + val, 0);

            let html = `
                <div class="bg-gradient-to-br from-gray-800 to-gray-900 text-gray-100 p-6 rounded-lg shadow-xl border border-gray-700 h-full overflow-y-auto scrollbar-thin">
                    <h2 class="text-3xl font-bold mb-6 text-yellow-400 border-b border-gray-600 pb-2">角色狀態</h2>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <p><span class="text-gray-400">姓名:</span> <span class="text-white">${escapeHtml(gameState.character.name)}</span></p>
                        <p><span class="text-gray-400">種族:</span> <span class="text-white">${escapeHtml(gameState.character.race)}</span></p>
                        <p><span class="text-gray-400">性別:</span> <span class="text-white">${escapeHtml(gameState.character.gender)}</span></p>
                        <p><span class="text-gray-400">職業:</span> <span class="text-white">${escapeHtml(gameState.character.profession)}</span></p>
                    </div>

                    <div class="mb-6">
                        <p class="block text-sm font-medium text-gray-400">角色背景故事:</p>
                        <p class="mt-1 text-white">${escapeHtml(gameState.character.background)}</p>
                    </div>

                    <div class="mb-6">
                        <p class="block text-sm font-medium text-gray-400">世界觀:</p>
                        <p class="mt-1 text-white">${escapeHtml(gameState.character.gameBackground)}</p>
                    </div>

                    <h3 class="text-2xl font-semibold mb-4 text-purple-300 border-b border-gray-600 pb-1">屬性 (有效值)</h3>
                    <p class="text-sm text-gray-400 mb-4">基礎總點數: <span class="${currentTotalAttributes !== gameState.maxTotalAttributePoints ? 'text-red-500' : 'text-blue-300'} font-bold">${currentTotalAttributes}</span> / ${gameState.maxTotalAttributePoints}</p>
                    <div class="grid grid-cols-2 gap-4 mb-6">
            `;
            for (const key in gameState.character.attributes) {
                const displayName = {
                    strength: '力量', agility: '敏捷', intelligence: '智力',
                    constitution: '體力', sanity: '理智', charisma: '魅力'
                }[key] || key;
                html += `
                        <div class="flex items-center justify-between">
                            <span class="capitalize text-gray-300">${escapeHtml(displayName)}:</span>
                            <span class="text-white">${gameState.character.attributes[key]} <span class="text-green-400 text-lg font-bold">(${effectiveAttributes[key]})</span></span>
                        </div>
                `;
            }
            html += `
                    </div>

                    <h3 class="text-2xl font-semibold mb-4 text-teal-300 border-b border-gray-600 pb-1">技能 & 天賦</h3>
                    <div class="mb-6">
                        <p class="block text-sm font-medium text-gray-400">技能:</p>
                        <p class="mt-1 text-white">${escapeHtml(gameState.character.skills.join(', '))}</p>
                    </div>
                    <div class="mb-6">
                        <p class="block text-sm font-medium text-gray-400">天賦:</p>
                        <p class="mt-1 text-white">${escapeHtml(gameState.character.talents.join(', '))}</p>
                    </div>
                    <div class="mb-6">
                        <p class="block text-sm font-medium text-gray-400">特殊能力:</p>
                        ${gameState.character.specialAbilities.map(ability => `<p class="mt-1 text-white">${escapeHtml(ability)}</p>`).join('')}
                    </div>
                    ${gameState.character.buffs && gameState.character.buffs.length > 0 ? `
                    <h3 class="text-2xl font-semibold mb-4 text-orange-300 border-b border-gray-600 pb-1">增益 (Buffs)</h3>
                    <div class="mb-6">
                        ${gameState.character.buffs.map(buff => `<p class="mt-1 text-white">${escapeHtml(buff)}</p>`).join('')}
                    </div>
                    ` : ''}
                    ${gameState.character.debuffs && gameState.character.debuffs.length > 0 ? `
                    <h3 class="text-2xl font-semibold mb-4 text-red-300 border-b border-gray-600 pb-1">減益 (Debuffs)</h3>
                    <div class="mb-6">
                        ${gameState.character.debuffs.map(debuff => `<p class="mt-1 text-white">${escapeHtml(debuff)}</p>`).join('')}
                    </div>
                    ` : ''}
                </div>
            `;
            container.innerHTML = html;
        }


        function renderInventory() {
            const container = document.getElementById('inventory-container');
            if (!container) return;
            container.innerHTML = ''; // 清空內容

            let equippedHtml = `
                <h3 class="text-2xl font-semibold mb-4 text-orange-300 border-b border-gray-600 pb-1">已裝備</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            `;
            for (const slotKey in itemSlotMap) {
                const slotName = itemSlotMap[slotKey];
                const equipped = gameState.equippedItems.find(item => item.slot === slotKey);
                equippedHtml += `
                    <div class="flex items-center justify-between bg-gray-700 p-2 rounded-md border border-gray-600">
                        <span class="text-gray-300">${escapeHtml(slotName)}:</span>
                        <div class="flex items-center space-x-2">
                            ${equipped ? `
                                <span class="text-white">${escapeHtml(equipped.name)}</span>
                                <button class="unequip-button bg-red-600 hover:bg-red-700 text-white text-xs px-2 py-1 rounded-md transition-colors"
                                    data-item-id="${equipped.id}" data-item-slot="${equipped.slot}">卸下</button>
                            ` : '<span class="text-gray-500">無</span>'}
                        </div>
                    </div>
                `;
            }
            equippedHtml += `</div>`;


            let backpackHtml = `
                <h3 class="text-2xl font-semibold mb-4 text-lime-300 border-b border-gray-600 pb-1">背包</h3>
                <div class="space-y-3 mb-6">
            `;
            if (gameState.backpack.length === 0) {
                backpackHtml += `<p class="text-gray-400 text-center">背包是空的。</p>`;
            } else {
                gameState.backpack.forEach(item => {
                    backpackHtml += `
                        <div class="flex items-center justify-between bg-gray-700 p-3 rounded-md shadow-sm border border-gray-600">
                            <div class="flex-grow">
                                <span class="font-bold text-white">${escapeHtml(item.name)} (${item.quantity})</span>
                                <p class="text-gray-400 text-sm">${escapeHtml(item.description)}</p>
                            </div>
                            <div class="flex space-x-2 ml-4">
                                ${item.type !== 'consumable' ? `
                                    <button class="equip-button bg-blue-600 hover:bg-blue-700 text-white text-xs px-3 py-1 rounded-md transition-colors"
                                        data-item-id="${item.id}" data-item-type="${item.type}" data-item-slot="${item.slot || ''}" data-item-name="${item.name}" data-item-description="${item.description}" data-item-stats='${JSON.stringify(item.stats || {})}' data-item-quantity="${item.quantity}">裝備</button>
                                ` : `
                                    <button class="use-button bg-green-600 hover:bg-green-700 text-white text-xs px-3 py-1 rounded-md transition-colors"
                                        data-item-id="${item.id}" data-item-name="${item.name}" data-item-description="${item.description}" data-item-quantity="${item.quantity}">使用</button>
                                `}
                                <button class="discard-button bg-red-600 hover:bg-red-700 text-white text-xs px-3 py-1 rounded-md transition-colors"
                                    data-item-id="${item.id}" data-item-slot="backpack">丟棄</button>
                            </div>
                        </div>
                    `;
                });
            }
            backpackHtml += `</div>`;

            // New Item Form
            let newItemFormHtml = `
                <h3 class="text-2xl font-semibold mb-4 text-cyan-300 border-b border-gray-600 pb-1">新增物品到背包</h3>
                <div class="bg-gray-800 p-4 rounded-lg shadow-inner border border-gray-700">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-400">名稱</label>
                            <input type="text" id="new-item-name" value="${escapeHtml(gameState.newItem.name)}" class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md text-white"/>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-400">類型</label>
                            <select id="new-item-type" class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md text-white">
                                <option value="weapon" ${gameState.newItem.type === 'weapon' ? 'selected' : ''}>武器</option>
                                <option value="armor" ${gameState.newItem.type === 'armor' ? 'selected' : ''}>防具</option>
                                <option value="consumable" ${gameState.newItem.type === 'consumable' ? 'selected' : ''}>消耗品</option>
                                <option value="quest" ${gameState.newItem.type === 'quest' ? 'selected' : ''}>任務物品</option>
                                <option value="misc" ${gameState.newItem.type === 'misc' ? 'selected' : ''}>雜物</option>
                            </select>
                        </div>
                        <div id="new-item-slot-div" class="${gameState.newItem.type === 'consumable' || gameState.newItem.type === 'quest' || gameState.newItem.type === 'misc' ? 'hidden' : ''}">
                            <label class="block text-sm font-medium text-gray-400">槽位</label>
                            <select id="new-item-slot" class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md text-white">
                                ${Object.entries(itemSlotMap).map(([key, value]) => `<option value="${key}" ${gameState.newItem.slot === key ? 'selected' : ''}>${value}</option>`).join('')}
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-400">數量</label>
                            <input type="number" id="new-item-quantity" value="${gameState.newItem.quantity}" min="1" class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md text-white"/>
                        </div>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-400">描述</label>
                        <textarea id="new-item-description" rows="2" class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md text-white">${escapeHtml(gameState.newItem.description)}</textarea>
                    </div>
                    <div id="new-item-stats-div" class="${gameState.newItem.type === 'consumable' || gameState.newItem.type === 'quest' || gameState.newItem.type === 'misc' ? 'hidden' : ''} grid grid-cols-2 gap-4 mt-4">
                        <h4 class="col-span-2 text-md font-medium text-gray-400 border-b border-gray-700 pb-2 mb-2">屬性加成</h4>
                        ${Object.keys(gameState.character.attributes).map(attrKey => {
                            const displayName = {
                                strength: '力量', agility: '敏捷', intelligence: '智力',
                                constitution: '體力', sanity: '理智', charisma: '魅力'
                            }[attrKey] || attrKey;
                            return `
                                <div class="flex items-center justify-between">
                                    <label class="capitalize text-gray-300">${escapeHtml(displayName)}:</label>
                                    <input type="number" min="-5" max="10" id="new-item-stat-${attrKey}" value="${gameState.newItem.stats[attrKey] || 0}"
                                        class="w-16 bg-gray-700 border-gray-600 rounded-md text-center text-white"/>
                                </div>
                            `;
                        }).join('')}
                    </div>
                    <button id="add-item-button" class="mt-4 w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md transition-colors">
                        新增物品
                    </button>
                </div>
            `;

            container.innerHTML = `
                <div class="bg-gradient-to-br from-gray-800 to-gray-900 text-gray-100 p-6 rounded-lg shadow-xl border border-gray-700 h-full overflow-y-auto scrollbar-thin">
                    ${equippedHtml}
                    ${backpackHtml}
                    ${newItemFormHtml}
                    <div class="mt-6 text-center">
                        <button id="ai-generate-item-button" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105 active:scale-95 border-2 border-indigo-400 text-lg">
                            AI 隨機生成物品
                        </button>
                    </div>
                </div>
            `;

            // Attach event listeners for equipped items
            document.querySelectorAll('.unequip-button').forEach(button => {
                button.onclick = (e) => {
                    const itemId = e.target.dataset.itemId;
                    // Find the item in equippedItems (using the dataset id)
                    const itemToUnequip = gameState.equippedItems.find(item => item.id === itemId);
                    if (itemToUnequip) {
                        unequipItem(itemToUnequip);
                    }
                };
            });

            // Attach event listeners for backpack items
            document.querySelectorAll('.equip-button').forEach(button => {
                button.onclick = (e) => {
                    const item = {
                        id: e.target.dataset.itemId,
                        name: e.target.dataset.itemName,
                        type: e.target.dataset.itemType,
                        slot: e.target.dataset.itemSlot,
                        description: e.target.dataset.itemDescription,
                        // Parse stats from dataset string
                        stats: JSON.parse(e.target.dataset.itemStats || '{}'),
                        quantity: parseInt(e.target.dataset.itemQuantity)
                    };
                    equipItem(item);
                };
            });
            document.querySelectorAll('.use-button').forEach(button => {
                button.onclick = (e) => {
                    const item = {
                        id: e.target.dataset.itemId,
                        name: e.target.dataset.itemName,
                        type: 'consumable', // Force type to consumable for use
                        description: e.target.dataset.itemDescription,
                        quantity: parseInt(e.target.dataset.itemQuantity)
                    };
                    useConsumable(item);
                };
            });
            document.querySelectorAll('.discard-button').forEach(button => {
                button.onclick = (e) => {
                    const itemId = e.target.dataset.itemId;
                    const itemSlot = e.target.dataset.itemSlot;
                    let itemToDiscard;
                    if (itemSlot === 'backpack') {
                        itemToDiscard = gameState.backpack.find(item => item.id === itemId);
                    } else {
                        itemToDiscard = gameState.equippedItems.find(item => item.id === itemId);
                    }
                    if (itemToDiscard) {
                        discardItem(itemToDiscard);
                    }
                };
            });

            // Attach event listeners for new item form
            const newItemNameInput = document.getElementById('new-item-name');
            const newItemTypeInput = document.getElementById('new-item-type');
            const newItemSlotSelect = document.getElementById('new-item-slot');
            const newItemQuantityInput = document.getElementById('new-item-quantity');
            const newItemDescriptionInput = document.getElementById('new-item-description');
            // const newItemStatsInput = document.getElementById('new-item-stats'); // No longer a single textarea
            const newItemSlotDiv = document.getElementById('new-item-slot-div');
            const newItemStatsDiv = document.getElementById('new-item-stats-div');

            const attributeInputIds = Object.keys(gameState.character.attributes).map(key => `new-item-stat-${key}`);
            const attributeInputs = attributeInputIds.map(id => document.getElementById(id));


            const updateNewItemState = () => {
                const newStats = {};
                attributeInputIds.forEach(id => {
                    const attrKey = id.replace('new-item-stat-', '');
                    const inputElement = document.getElementById(id);
                    newStats[attrKey] = parseInt(inputElement.value || '0');
                });

                gameState.newItem = {
                    name: newItemNameInput.value,
                    type: newItemTypeInput.value,
                    slot: newItemSlotSelect.value,
                    quantity: parseInt(newItemQuantityInput.value || '1'),
                    description: newItemDescriptionInput.value,
                    stats: newStats
                };
            };

            newItemTypeInput.onchange = (e) => {
                const selectedType = e.target.value;
                if (selectedType === 'consumable' || selectedType === 'quest' || selectedType === 'misc') {
                    newItemSlotDiv.classList.add('hidden');
                    newItemStatsDiv.classList.add('hidden');
                    newItemSlotSelect.value = ''; // Clear slot for non-equip items
                    // Reset stats inputs to 0
                    attributeInputs.forEach(input => input.value = '0');
                } else {
                    newItemSlotDiv.classList.remove('hidden');
                    newItemStatsDiv.classList.remove('hidden');
                }
                updateNewItemState();
            };

            newItemNameInput.onchange = updateNewItemState;
            newItemSlotSelect.onchange = updateNewItemState;
            newItemQuantityInput.onchange = updateNewItemState;
            newItemDescriptionInput.onchange = updateNewItemState;
            attributeInputs.forEach(input => {
                input.onchange = updateNewItemState;
            });

            document.getElementById('add-item-button').onclick = () => {
                if (!gameState.newItem.name) {
                    console.warn("物品名稱不能為空！");
                    return;
                }
                const newItemToAdd = {
                    id: `custom_item_${Date.now()}`, // Simple unique ID
                    name: gameState.newItem.name,
                    type: gameState.newItem.type,
                    description: gameState.newItem.description,
                    quantity: gameState.newItem.quantity
                };
                if (gameState.newItem.type !== 'consumable' && gameState.newItem.type !== 'quest' && gameState.newItem.type !== 'misc') {
                    newItemToAdd.slot = gameState.newItem.slot;
                    newItemToAdd.stats = gameState.newItem.stats;
                }
                addItemToBackpack(newItemToAdd);
                // Clear form after adding and reset stats inputs
                gameState.newItem = { name: '', type: 'weapon', slot: 'mainHand', description: '', stats: { strength: 0, agility: 0, intelligence: 0, constitution: 0, sanity: 0, charisma: 0 }, quantity: 1 };
                renderInventory();
            };

            // Attach event listener for AI generate item button
            document.getElementById('ai-generate-item-button').onclick = generateRandomItemWithAI;
        }


        function renderStatusDisplay() {
            const container = document.getElementById('status-display-container');
            if (!container) return;
            container.innerHTML = ''; // Clear content

            const char = gameState.character;
            const time = gameState.gameTime;

            let html = `
                <div class="bg-gradient-to-br from-gray-800 to-gray-900 text-gray-100 p-6 rounded-lg shadow-xl border border-gray-700">
                    <h2 class="text-3xl font-bold mb-6 text-indigo-400 border-b border-gray-600 pb-2">狀態 & 時間</h2>

                    <div class="grid grid-cols-2 gap-4 mb-6">
                        <div>
                            <p class="text-lg font-medium text-gray-300">HP: <span class="text-red-400 font-bold">${char.currentHp} / ${char.maxHp}</span></p>
                            <div class="w-full bg-gray-700 rounded-full h-2.5 mt-1">
                                <div class="bg-red-500 h-2.5 rounded-full" style="width: ${(char.currentHp / char.maxHp) * 100}%"></div>
                            </div>
                        </div>
                        <div>
                            <p class="text-lg font-medium text-gray-300">MP: <span class="text-blue-400 font-bold">${char.currentMp} / ${char.maxMp}</span></p>
                            <div class="w-full bg-gray-700 rounded-full h-2.5 mt-1">
                                <div class="bg-blue-500 h-2.5 rounded-full" style="width: ${(char.currentMp / char.maxMp) * 100}%"></div>
                            </div>
                        </div>
                        <div>
                            <p class="text-lg font-medium text-gray-300">SAN: <span class="text-purple-400 font-bold">${char.currentSanity} / ${char.maxSanity}</span></p>
                            <div class="w-full bg-gray-700 rounded-full h-2.5 mt-1">
                                <div class="bg-purple-500 h-2.5 rounded-full" style="width: ${(char.currentSanity / char.maxSanity) * 100}%"></div>
                            </div>
                        </div>
                        <div>
                            <p class="text-lg font-medium text-gray-300">飽食度: <span class="text-yellow-400 font-bold">${char.currentHunger} / ${char.maxHunger}</span></p>
                            <div class="w-full bg-gray-700 rounded-full h-2.5 mt-1">
                                <div class="bg-yellow-500 h-2.5 rounded-full" style="width: ${(char.currentHunger / char.maxHunger) * 100}%"></div>
                            </div>
                        </div>
                        <div class="col-span-2">
                            <p class="text-lg font-medium text-gray-300">疲勞度: <span class="text-orange-400 font-bold">${char.currentFatigue} / ${char.maxFatigue}</span></p>
                            <div class="w-full bg-gray-700 rounded-full h-2.5 mt-1">
                                <div class="bg-orange-500 h-2.5 rounded-full" style="width: ${(char.currentFatigue / char.maxFatigue) * 100}%"></div>
                            </div>
                        </div>
                    </div>

                    <h3 class="text-2xl font-semibold mb-4 text-green-300 border-b border-gray-600 pb-1">遊戲時間</h3>
                    <p class="text-xl font-bold text-white mb-4">${getTimestamp(time.day, time.hour, time.minute)}</p>

                    <h3 class="text-2xl font-semibold mb-4 text-pink-300 border-b border-gray-600 pb-1">遊戲進度</h3>
                    <p class="text-xl font-bold text-white mb-4">回合: ${gameState.currentTurn} / ${gameState.maxTurns}</p>
                    <p class="text-xl font-bold text-white mb-4">難度: ${
                        gameState.difficulty === 'easy' ? '容易' :
                        gameState.difficulty === 'medium' ? '普通' : '困難'
                    }</p>

                    <h3 class="text-2xl font-semibold mb-4 text-pink-300 border-b border-gray-600 pb-1">遊戲ID</h3>
                    <div class="flex items-center space-x-2">
                        <span id="display-user-id" class="text-white text-sm break-all">${gameState.userId || '載入中...'}</span>
                        <button id="copy-user-id" class="bg-gray-600 hover:bg-gray-700 text-white text-xs px-2 py-1 rounded-md transition-colors">複製</button>
                    </div>
                </div>
            `;
            container.innerHTML = html;

            document.getElementById('copy-user-id').onclick = () => {
                const userIdText = document.getElementById('display-user-id').textContent;
                // document.execCommand('copy') is generally preferred for CodePen iframe compatibility
                const tempInput = document.createElement('textarea');
                tempInput.value = userIdText;
                document.body.appendChild(tempInput);
                tempInput.select();
                document.execCommand('copy');
                document.body.removeChild(tempInput);
                console.log('User ID copied to clipboard!');
            };
        }

        function renderStoryLog() {
            const container = document.getElementById('story-log-container');
            if (!container) return;
            container.innerHTML = ''; // Clear content

            let logEntriesHtml = '';
            gameState.storyLog.forEach(entry => {
                let contentClass = '';
                let timestampClass = 'text-gray-500 text-xs';
                let content = entry.content;

                switch (entry.type) {
                    case 'event':
                        contentClass = 'text-gray-200';
                        break;
                    case 'player_choice':
                        contentClass = 'text-green-300 italic';
                        break;
                    case 'npc_dialogue':
                        contentClass = 'text-blue-300';
                        content = `<span class="font-bold text-blue-200">${entry.npc || 'NPC'}</span>: ${content}`;
                        break;
                    case 'dice_roll':
                        // 使用 outcome 屬性來判斷顏色
                        if (entry.diceRoll.outcome === "大成功") {
                            contentClass = 'text-green-500';
                        } else if (entry.diceRoll.outcome === "成功") {
                            contentClass = 'text-lime-400';
                        } else if (entry.diceRoll.outcome === "大失敗") {
                            contentClass = 'text-red-600';
                        }
                        else {
                            contentClass = 'text-red-400';
                        }
                        content = `🎲 ${content}`;
                        break;
                    case 'narration':
                        contentClass = 'text-yellow-300 italic';
                        break;
                    default:
                        contentClass = 'text-gray-300';
                }

                logEntriesHtml += `
                    <div class="mb-4 p-3 bg-gray-700 rounded-lg shadow-inner">
                        <p class="${contentClass} mb-1">${content}</p>
                        <p class="${timestampClass}">${entry.timestamp}</p>
                    </div>
                `;
            });

            // Add input field and options if available
            let inputAreaHtml = '';
            if (gameState.gameOver) {
                // Game over: display reason and export button, disable other interactions
                inputAreaHtml = `
                    <div class="p-4 bg-gray-800 rounded-lg shadow-md border border-gray-700 text-center">
                        <h2 class="text-4xl font-extrabold text-red-500 mb-6 drop-shadow-lg">遊戲結束！</h2>
                        <p id="game-over-reason-display" class="text-lg text-gray-300 mb-8">${escapeHtml(gameState.gameOverReason)}</p>
                        <button id="export-log-button-gameover" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-8 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105 active:scale-95 border-2 border-indigo-400 text-lg">
                            匯出冒險日誌
                        </button>
                    </div>
                `;
            } else if (!gameState.gameStarted) {
                // Game not started, no input needed
            } else if (gameState.loadingStory) {
                inputAreaHtml = `
                    <div class="text-center p-4">
                        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500 mx-auto mb-2"></div>
                        <p class="text-indigo-400">故事生成中...</p>
                    </div>
                `;
            } else if (gameState.currentEvent && gameState.currentEvent.options && gameState.currentEvent.options.length > 0) {
                inputAreaHtml = `
                    <div class="p-4 bg-gray-800 rounded-lg shadow-md border border-gray-700">
                        <h4 class="text-xl font-semibold mb-3 text-white">選擇你的行動：</h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                            ${gameState.currentEvent.options.map(option => `
                                <button class="choice-button w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200"
                                    data-choice-text="${escapeHtml(option.text)}" data-choice-difficulty="${option.difficulty}" data-dice-type="${option.diceType || 'd20'}">${escapeHtml(option.text)} (難度: ${option.difficulty}, 骰: ${option.diceType.toUpperCase()})</button>
                            `).join('')}
                        </div>
                        <div class="mt-4">
                            <input type="text" id="custom-choice-input" placeholder="或輸入自訂行動 (難度: 8, 骰: D20)..."
                                class="w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white p-2 focus:ring-blue-500 focus:border-blue-500"/>
                            <button id="submit-custom-choice" class="mt-2 w-full bg-teal-600 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded-md transition-colors">
                                送出自訂行動
                            </button>
                        </div>
                    </div>
                `;
            } else {
                // Default input if no specific options are provided (shouldn't happen often)
                inputAreaHtml = `
                    <div class="p-4 bg-gray-800 rounded-lg shadow-md border border-gray-700">
                        <input type="text" id="custom-choice-input" placeholder="輸入你的行動 (難度: 8, 骰: D20)..."
                            class="w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white p-2 focus:ring-blue-500 focus:border-blue-500"/>
                        <button id="submit-custom-choice" class="mt-2 w-full bg-teal-600 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded-md transition-colors">
                            送出行動
                        </button>
                    </div>
                `;
            }

            container.innerHTML = `
                <div class="bg-gradient-to-br from-gray-800 to-gray-900 text-gray-100 p-6 rounded-lg shadow-xl border border-gray-700 h-full flex flex-col overflow-hidden">
                    <h2 class="text-3xl font-bold mb-6 text-emerald-400 border-b border-gray-600 pb-2">冒險日誌</h2>
                    <div id="log-entries" class="flex-grow overflow-y-auto scrollbar-thin pr-2 mb-4">
                        ${logEntriesHtml}
                    </div>
                    <div id="story-input-area" class="flex-shrink-0">
                        ${inputAreaHtml}
                    </div>
                </div>
            `;

            // Scroll to bottom of log
            const logEntriesDiv = document.getElementById('log-entries');
            if (logEntriesDiv) {
                logEntriesDiv.scrollTop = logEntriesDiv.scrollHeight;
            }

            // Attach event listeners for choices, only if game is not over
            if (!gameState.gameOver) {
                document.querySelectorAll('.choice-button').forEach(button => {
                    button.onclick = (e) => {
                        const choiceText = e.target.dataset.choiceText;
                        const difficulty = parseInt(e.target.dataset.choiceDifficulty);
                        const diceType = e.target.dataset.diceType; // Get dice type from dataset
                        handlePlayerChoice(choiceText, difficulty, diceType);
                    };
                });

                const customChoiceInput = document.getElementById('custom-choice-input');
                const submitCustomChoiceButton = document.getElementById('submit-custom-choice');

                if (customChoiceInput && submitCustomChoiceButton) {
                    const handleSubmit = () => {
                        const customText = customChoiceInput.value.trim();
                        if (customText) {
                            // For custom input, default difficulty to 8 and dice type to d20
                            handlePlayerChoice(customText, 8, 'd20');
                            customChoiceInput.value = ''; // Clear input
                        }
                    };
                    submitCustomChoiceButton.onclick = handleSubmit;
                    customChoiceInput.onkeypress = (e) => {
                        if (e.key === 'Enter') {
                            handleSubmit();
                        }
                    };
                }
            } else {
                 // Re-attach the export button listener if it was rendered within the storyInputArea
                 const exportButtonGameOver = document.getElementById('export-log-button-gameover');
                 if (exportButtonGameOver) {
                    exportButtonGameOver.onclick = () => {
                        const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(gameState, null, 2));
                        const downloadAnchorNode = document.createElement('a');
                        downloadAnchorNode.setAttribute("href", dataStr);
                        downloadAnchorNode.setAttribute("download", `trpg_adventure_gameOver_${Date.now()}.json`);
                        document.body.appendChild(downloadAnchorNode);
                        downloadAnchorNode.click();
                        downloadAnchorNode.remove();
                        const exportButton = document.getElementById('export-log-button-gameover');
                        if (exportButton) {
                            exportButton.textContent = '已匯出！';
                            exportButton.disabled = true;
                        }
                    };
                 }
            }
        }

        // Removed renderDiceRoller() from game mode as per user request.
        // It's still defined in case of a need to manually roll dice in a non-game context,
        // but its container is hidden with CSS.

        function renderExportGame() {
            const container = document.getElementById('export-game-container');
            if (!container) return;
            container.innerHTML = `
                <div class="bg-gradient-to-br from-gray-800 to-gray-900 text-gray-100 p-6 rounded-lg shadow-xl border border-gray-700 text-center">
                    <h2 class="text-3xl font-bold mb-6 text-rose-400 border-b border-gray-600 pb-2">匯出遊戲記錄</h2>
                    <button id="export-button" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-8 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105 active:scale-95 border-2 border-indigo-400 text-xl">
                        下載遊戲進度 (JSON)
                    </button>
                </div>
            `;

            document.getElementById('export-button').onclick = () => {
                const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(gameState, null, 2));
                const downloadAnchorNode = document.createElement('a');
                downloadAnchorNode.setAttribute("href", dataStr);
                downloadAnchorNode.setAttribute("download", `trpg_adventure_${Date.now()}.json`);
                document.body.appendChild(downloadAnchorNode);
                downloadAnchorNode.click();
                downloadAnchorNode.remove();
            };
        }

        // --- 初始設定畫面渲染 ---
        function renderInitialSetup() {
            const adventureSettingsSection = document.getElementById('adventure-settings-section');
            const characterSettingsSection = document.getElementById('character-settings-section');
            const nextStepButton = document.getElementById('next-step-button');
            const previousStepButton = document.getElementById('previous-step-button');
            const startGameButton = document.getElementById('start-game-button');
            const storyStyleError = document.getElementById('story-style-error');
            const gameTurnsError = document.getElementById('game-turns-error');

            if (gameState.setupStep === 1) {
                adventureSettingsSection.classList.remove('hidden');
                characterSettingsSection.classList.add('hidden');
                nextStepButton.classList.remove('hidden');
                previousStepButton.classList.add('hidden');
                startGameButton.classList.add('hidden'); // 隱藏開始遊戲按鈕

                // Render difficulty buttons and set active state
                const difficultySelectionDiv = document.getElementById('difficulty-selection');
                if (difficultySelectionDiv) {
                    difficultySelectionDiv.innerHTML = `
                        <button class="difficulty-button w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-colors ${gameState.difficulty === 'easy' ? 'border-2 border-blue-500' : ''}" data-difficulty="easy">容易</button>
                        <button class="difficulty-button w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-colors ${gameState.difficulty === 'medium' ? 'border-2 border-blue-500' : ''}" data-difficulty="medium">普通</button>
                        <button class="difficulty-button w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-colors ${gameState.difficulty === 'hard' ? 'border-2 border-blue-500' : ''}" data-difficulty="hard">困難</button>
                    `;
                    document.querySelectorAll('.difficulty-button').forEach(button => {
                        button.onclick = (e) => {
                            gameState.difficulty = e.target.dataset.difficulty;
                            renderInitialSetup(); // Re-render to update active button
                        };
                    });
                }

                const storyStyleSelectionDiv = document.getElementById('story-style-selection');
                if (storyStyleSelectionDiv) {
                    storyStyleSelectionDiv.innerHTML = gameState.storyStyles.map(style => `
                        <button class="story-style-button w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-colors ${gameState.storyStyle === style.id ? 'border-2 border-blue-500' : ''}"
                            data-style-id="${style.id}">
                            ${escapeHtml(style.name)}
                        </button>
                    `).join('');

                    document.querySelectorAll('.story-style-button').forEach(button => {
                        button.onclick = async (e) => {
                            const styleId = e.target.dataset.styleId;
                            if (gameState.storyStyle !== styleId) {
                                storyStyleError.classList.add('hidden'); // Clear error on new selection
                                gameState.storyStyle = styleId;
                                renderInitialSetup(); // Re-render to show selected style
                                await generateCharacterFromStyle(styleId);
                            }
                        };
                    });
                }

                const gameTurnsInput = document.getElementById('game-turns-input');
                if (gameTurnsInput) {
                    gameTurnsInput.value = gameState.maxTurns;
                    gameTurnsInput.onchange = (e) => {
                        const newMaxTurns = parseInt(e.target.value);
                        if (isNaN(newMaxTurns) || newMaxTurns < 6) { // Changed minimum to 6
                            gameTurnsError.classList.remove('hidden');
                            e.target.value = 6; // Revert to minimum valid
                            gameState.maxTurns = 6;
                        } else {
                            gameTurnsError.classList.add('hidden');
                            gameState.maxTurns = newMaxTurns;
                        }
                    };
                }

                const uploadGameRecordInput = document.getElementById('upload-game-record');
                if (uploadGameRecordInput) {
                    uploadGameRecordInput.onchange = (e) => {
                        const file = e.target.files[0];
                        if (file) {
                            const reader = new FileReader();
                            reader.onload = async (event) => {
                                try {
                                    const loadedState = JSON.parse(event.target.result);
                                    // 深度合併以保留 Firebase 相關的動態內容
                                    gameState = {
                                        ...gameState,
                                        ...loadedState,
                                        // 確保 Firebase 相關的變數不被覆蓋，或者在載入後重新初始化
                                        app: app,
                                        auth: auth,
                                        userId: gameState.userId // 確保 userId 不被覆蓋，除非 loadedState 有明確的 userId 屬性
                                    };
                                    // 如果 loadedState 包含 userId，使用 loadedState 的 userId
                                    if (loadedState.userId) {
                                        gameState.userId = loadedState.userId;
                                    }

                                    // 重新開始遊戲畫面
                                    document.getElementById('initial-setup-area').classList.add('hidden');
                                    document.getElementById('game-container').classList.remove('hidden');
                                    document.getElementById('export-game-container').classList.remove('hidden');
                                    gameState.gameStarted = true;
                                    
                                    renderAllGameComponents(); // 重新渲染所有遊戲組件
                                    addStoryEntry({ type: "narration", content: "遊戲紀錄已成功載入！繼續你的冒險。" });

                                } catch (error) {
                                    console.error("載入遊戲紀錄失敗:", error);
                                    alert("載入遊戲紀錄失敗。請確保檔案是有效的 JSON 格式。"); // 使用 alert 作為簡易提示
                                }
                            };
                            reader.readAsText(file);
                        }
                    };
                }

            } else if (gameState.setupStep === 2) {
                adventureSettingsSection.classList.add('hidden');
                characterSettingsSection.classList.remove('hidden');
                nextStepButton.classList.add('hidden');
                previousStepButton.classList.remove('hidden');
                startGameButton.classList.remove('hidden'); // 顯示開始遊戲按鈕

                renderCharacterSheet(); // Render character sheet for editing
            }
        }

        // 渲染所有遊戲組件 (用於載入遊戲或開始遊戲後)
        function renderAllGameComponents() {
            renderCharacterSheetGameMode();
            renderInventory();
            renderStatusDisplay();
            renderStoryLog();
            // renderDiceRoller(); // 移除在遊戲主體中顯示擲骰系統
            renderExportGame();
        }

        // Utility map for max dice value (for Critical Success on max roll)
        const diceTypeToMax = {
            'd4': 4, 'd6': 6, 'd8': 8, 'd10': 10, 'd12': 12, 'd20': 20, 'd30': 30, 'd60': 60, 'd100': 100
        };


        // --- 處理步驟跳轉 ---
        document.getElementById('next-step-button').onclick = async () => {
            const storyStyleError = document.getElementById('story-style-error');
            const gameTurnsError = document.getElementById('game-turns-error');

            if (!gameState.storyStyle) {
                storyStyleError.classList.remove('hidden');
                alert("請先選擇一個故事風格！");
                return;
            }

            const gameTurnsInput = document.getElementById('game-turns-input');
            const maxTurns = parseInt(gameTurnsInput.value);
            if (isNaN(maxTurns) || maxTurns < 6) { // Changed minimum to 6
                gameTurnsError.classList.remove('hidden');
                alert("遊戲回合數必須至少為 6。"); // Updated alert message
                return;
            } else {
                gameTurnsError.classList.add('hidden');
            }

            // New check for custom story background
            if (gameState.storyStyle === 'custom_story') {
                // Temporarily render the character sheet content to get the current value of game-background
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = renderCharacterSheetContentForTemp(gameState.character, gameState.maxTotalAttributePoints, true);
                const customGameBackgroundInput = tempDiv.querySelector('#game-background');
                
                if (!customGameBackgroundInput || customGameBackgroundInput.value.trim() === "") {
                    alert("你選擇了「自訂故事」，請在角色設定頁面的「世界觀」文字框中輸入你的故事背景後再點擊「下一步」！");
                    gameState.setupStep = 2; // Explicitly go to step 2
                    renderInitialSetup(); // Re-render to show character sheet
                    // Scroll to the game background textarea if possible
                    const gameBackgroundTextArea = document.getElementById('game-background');
                    if (gameBackgroundTextArea) {
                        gameBackgroundTextArea.focus();
                        gameBackgroundTextArea.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                    return; // Prevent proceeding until background is filled for custom style
                } else {
                     // If custom background is filled, update gameState before proceeding
                     gameState.character.gameBackground = customGameBackgroundInput.value.trim();
                }
            }

            gameState.maxTurns = maxTurns;
            gameState.setupStep = 2;
            renderInitialSetup();
        };

        // Helper function to render character sheet content for temporary use
        function renderCharacterSheetContentForTemp(character, maxTotal, isDisabled) {
            const effectiveAttributes = getEffectiveAttributes(); // Use current effective attributes
            const currentTotalAttributes = Object.values(character.attributes).reduce((sum, val) => sum + val, 0);
            const disabledAttr = isDisabled ? 'disabled' : '';

            let html = `
                <div class="bg-gradient-to-br from-gray-800 to-gray-900 text-gray-100 p-6 rounded-lg shadow-xl border border-gray-700 h-full overflow-y-auto scrollbar-thin">
                    <h2 class="text-3xl font-bold mb-6 text-yellow-400 border-b border-gray-600 pb-2">角色設定</h2>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-400">姓名</label>
                            <input type="text" id="char-name" value="${escapeHtml(character.name)}" ${disabledAttr}
                                class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-400">種族</label>
                            <input type="text" id="char-race" value="${escapeHtml(character.race)}" ${disabledAttr}
                                class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-400">性別</label>
                            <input type="text" id="char-gender" value="${escapeHtml(character.gender)}" ${disabledAttr}
                                class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-400">職業</label>
                            <input type="text" id="char-profession" value="${escapeHtml(character.profession)}" ${disabledAttr}
                                class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                        </div>
                    </div>

                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-400">角色背景故事</label>
                        <textarea id="char-background" rows="4" ${disabledAttr}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500">${escapeHtml(character.background)}</textarea>
                    </div>

                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-400">世界觀 (影響故事開頭與物品生成)</label>
                        <textarea id="game-background" rows="4" ${disabledAttr}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500">${escapeHtml(character.gameBackground)}</textarea>
                    </div>

                    <h3 class="text-2xl font-semibold mb-4 text-purple-300 border-b border-gray-600 pb-1">屬性 (有效值)</h3>
                    <p class="text-sm text-gray-400 mb-4">總點數: <span class="${currentTotalAttributes !== maxTotal ? 'text-red-500' : 'text-blue-300'} font-bold">${currentTotalAttributes}</span> / ${maxTotal}</p>
                    <div class="grid grid-cols-2 gap-4 mb-6">
            `;
            for (const key in character.attributes) {
                const displayName = {
                    strength: '力量', agility: '敏捷', intelligence: '智力',
                    constitution: '體力', sanity: '理智', charisma: '魅力'
                }[key] || key;
                html += `
                        <div class="flex items-center justify-between">
                            <label class="capitalize text-gray-300">${escapeHtml(displayName)}:</label>
                            <div class="flex items-center space-x-2">
                                <input type="number" min="1" max="18" id="attr-${key}" value="${character.attributes[key]}" ${disabledAttr}
                                    class="w-16 bg-gray-700 border-gray-600 rounded-md text-center text-white"/>
                                <span class="text-green-400 text-lg font-bold">(${effectiveAttributes[key]})</span>
                            </div>
                        </div>
                `;
            }
            html += `
                    </div>

                    <h3 class="text-2xl font-semibold mb-4 text-teal-300 border-b border-gray-600 pb-1">技能 & 天賦</h3>
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-400">技能 (逗號分隔)</label>
                        <input type="text" id="char-skills" value="${escapeHtml(character.skills.join(', '))}" ${disabledAttr}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                    </div>
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-400">天賦 (逗號分隔)</label>
                        <input type="text" id="char-talents" value="${escapeHtml(character.talents.join(', '))}" ${disabledAttr}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500"/>
                    </div>
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-400">特殊能力 (每行一個)</label>
                        <textarea id="char-abilities" rows="4" ${disabledAttr}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500">${escapeHtml(character.specialAbilities.join('\n'))}</textarea>
                    </div>

                    <h3 class="text-2xl font-semibold mb-4 text-orange-300 border-b border-gray-600 pb-1">增益 (Buffs)</h3>
                    <div class="mb-6">
                        <textarea id="char-buffs" rows="2" ${disabledAttr}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500">${escapeHtml(character.buffs.join('\n'))}</textarea>
                    </div>
                    <h3 class="text-2xl font-semibold mb-4 text-red-300 border-b border-gray-600 pb-1">減益 (Debuffs)</h3>
                    <div class="mb-6">
                        <textarea id="char-debuffs" rows="2" ${disabledAttr}
                            class="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm text-white focus:ring-blue-500 focus:border-blue-500">${escapeHtml(character.debuffs.join('\n'))}</textarea>
                    </div>
                </div>
            `;
            return html;
        }

        document.getElementById('previous-step-button').onclick = () => {
            gameState.setupStep = 1;
            renderInitialSetup();
        };


        // --- 遊戲啟動與初始化 ---
        document.getElementById('start-game-button').onclick = async () => {
            // 檢查屬性點數是否超出上限
            const currentTotalAttributes = Object.values(gameState.character.attributes).reduce((sum, val) => sum + val, 0);
            if (currentTotalAttributes !== gameState.maxTotalAttributePoints) {
                console.warn(`請將總屬性點數調整至 ${gameState.maxTotalAttributePoints} 才能開始冒險！`);
                alert(`你的角色屬性總點數 (${currentTotalAttributes}) 與目標值 (${gameState.maxTotalAttributePoints}) 不符。請調整後再開始冒險。`);
                return;
            }

            // 檢查是否選擇了故事風格 (再次檢查，以防通過載入檔案跳過)
            if (!gameState.storyStyle && gameState.currentTurn === 0) { // 如果是新遊戲且沒有風格，則提示
                alert("請先選擇一個故事風格才能開始冒險！");
                gameState.setupStep = 1; // 跳回第一步
                renderInitialSetup();
                return;
            }
            
            // 遊戲回合數在 next-step-button 時已驗證並設定，這裡不再重複
            if (gameState.currentTurn === 0) { // 只有新遊戲才設定為第一回合
                gameState.currentTurn = 1;
            }

            document.getElementById('initial-setup-area').classList.add('hidden'); // 隱藏初始設定區
            document.getElementById('game-container').classList.remove('hidden');    // 顯示遊戲區
            document.getElementById('export-game-container').classList.remove('hidden'); // 顯示匯出按鈕
            gameState.gameStarted = true;
            gameState.gameOver = false; // 確保新遊戲開始時遊戲結束狀態為 false

            // 初始化所有遊戲組件
            renderAllGameComponents();

            if (gameState.storyLog.length === 0) { // 只有當沒有任何故事日誌時才生成初始故事 (避免載入遊戲後重複生成)
                // 第一次故事提示
                const initialPrompt = `你是一個單人 TRPG 的遊戲主持人，你的世界觀是：「${escapeHtml(gameState.character.gameBackground)}」。你已經根據選擇的風格生成了角色。
角色 "${escapeHtml(gameState.character.name)}" (一個 ${escapeHtml(gameState.character.race)} ${escapeHtml(gameState.character.profession)}) 剛開始在一個新環境中冒險，環境設定基於上述世界觀。
當前遊戲回合數: ${gameState.currentTurn} / ${gameState.maxTurns}。
當前遊戲難度為 **${gameState.difficulty}**。
請將故事發展，以推進主線為目標，除非是重要情報否則不需過多描述。請參考回合數，制定一個簡單的故事，不要太複雜，線索指向明確，且在1/3回合時就一定要進入劇情內核，不再出現多餘的線索，**如果接近或達到最大回合數 (${gameState.maxTurns})，請簡化故事流程，直接引導故事走向高潮並準備一個簡單、明確的結局**。
**作為初始故事，請絕對不要設定 'gameOver': true 也不要設定 'damageDice'。**
你的回應必須是 JSON 格式，不允許任何額外文字或前導說明。JSON 必須包含 'narrative' (故事敘述，不超過 300 字) 和一個 'options' 陣列。
'options' 陣列必須恰好包含三個玩家行動選項。每個選項都應包含 'text' (玩家可選擇的行動文字)、'action' (內部標識符，可與 text 相同)、'difficulty' (一個介於 5 到 15 之間的數字，代表該行動的原始難度) 和 'diceType' (一個字符串，必須是 "d4", "d6", "d10", "d20", "d30", "d60", "d100" 之一，根據行動難度、角色能力和劇情平衡決定)。
`;

                const initialStoryGenerationConfig = {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "OBJECT",
                        properties: {
                            "narrative": { "type": "STRING" },
                            "options": {
                                "type": "ARRAY",
                                "items": {
                                    "type": "OBJECT",
                                    "properties": {
                                        "text": { "type": "STRING" },
                                        "action": { "type": "STRING" },
                                        "difficulty": { "type": "INTEGER", "minimum": 5, "maximum": 15 },
                                    "diceType": { "type": "STRING", "enum": ["d4", "d6", "d10", "d20", "d30", "d60", "d100"] } // 新增 diceType
                                    },
                                    "required": ["text", "action", "difficulty", "diceType"]
                                },
                                "minItems": 3,
                                "maxItems": 3
                            },
                        },
                        "required": ["narrative", "options"]
                    }
                };

                gameState.loadingStory = true;
                renderStoryLog();

                try {
                    const rawJson = await callGeminiAPI(initialPrompt, initialStoryGenerationConfig);
                    let storyResponse;
                    if (!rawJson || rawJson.trim() === "" || rawJson.startsWith("無法生成故事") || rawJson.startsWith("Gemini API 請求失敗") || rawJson.startsWith("Gemini API 回應格式異常")) {
                        throw new Error(rawJson || "API 返回空回應或無效 JSON。");
                    }
                    storyResponse = JSON.parse(rawJson);

                    // 確保沒有 damageDice 或 gameOver 屬性被意外添加，即使 schema 已移除，這是一個雙重保險
                    if (storyResponse.damageDice || storyResponse.gameOver) {
                         console.warn("初始故事不應包含 damageDice 或 gameOver 屬性，即使 AI 生成了，我們將忽略它以確保遊戲順利開始。");
                         delete storyResponse.damageDice;
                         delete storyResponse.gameOver;
                         delete storyResponse.gameOverReason;
                    }
                    
                    let narrative = storyResponse.narrative;
                    if (narrative.length > 300) {
                        narrative = narrative.substring(0, 300) + '...';
                    }

                    addStoryEntry({ type: "event", content: escapeHtml(narrative) });
                    gameState.currentEvent = { options: storyResponse.options };


                } catch (error) {
                    console.error("初始故事生成失敗:", error);
                    addStoryEntry({ type: "narration", content: `無法啟動冒險。錯誤: ${error.message || '未知錯誤'}。你感到一陣茫然。` });
                    // 提供一個預設選項以避免卡住
                    gameState.currentEvent = {
                        options: [
                            { text: "再次嘗試啟動", action: "restart_attempt", difficulty: 8, diceType: 'd20' },
                            { text: "放棄並休息", action: "give_up_rest", difficulty: 5, diceType: 'd6' },
                            { text: "檢查周圍環境", action: "check_surroundings", difficulty: 7, diceType: 'd10' }
                        ]
                    };
                } finally {
                    gameState.loadingStory = false;
                    renderStoryLog();
                }
            }
        };

        // 頁面載入時初始化 Firebase 並渲染初始設定畫面
        window.onload = async () => {
            await initializeFirebase();
            renderInitialSetup(); // 渲染初始設定畫面，包含風格選擇和角色設定

            // Removed old game over button bindings
        };

    </script>
</body>
</html>
